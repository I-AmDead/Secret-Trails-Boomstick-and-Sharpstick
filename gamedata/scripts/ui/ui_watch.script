watch_mode = ogse.load_var("watch_mode", 1)
local snd_adjust = sound_object('interface\\mark_adjust')

local function increment_watch_mode()
    watch_mode = watch_mode < 3 and watch_mode + 1 or 1
    game.play_hud_anm("script\\mark_adjust.anm", 1, 2, 1, false, false)
    snd_adjust:play(db.actor, 0, sound_object.s2d)
    ogse.save_var("watch_mode", watch_mode)
end

local function on_key_down(key, bind)
    if bind == key_bindings.kWATCH_MODE and watch_mode < 4 then
        increment_watch_mode()
    end
end

local function c2t(ct)
    if not ct then return nil end
    local Y, M, D, h, m, s, ms = ct:get()
    return {Y = Y, M = M, D = D, h = h, m = m, s = s, ms = ms}
end

local function overweight_level()
    local inv_weight = has_alife_info("pre_blowout") and math.random(99, db.actor:get_max_walk_weight()) or db.actor:get_inventory_weight()
    local max_weight = db.actor:get_max_weight()
    local max_walk_weight = db.actor:get_max_walk_weight()

    if inv_weight >= max_weight then
        return (max_walk_weight - inv_weight) * 0.1
    end
    return 1.0
end

local function update_watch_mode()
    if has_alife_info("pobeg_start") and watch_mode ~= 4 then
        watch_mode = 4
    end
end

local function update_game_time()
    if watch_mode == 1 then
        local game_time = c2t(game.get_game_time())
        shader_set_custom_param("game_time", game_time.h, game_time.m, game_time.s, game_time.ms)
    end
end

local function update_watch_actor_params()
    if has_alife_info("pre_blowout") then
        shader_set_custom_param("watch_actor_params", math.random(0.1, 1.0), math.random(0.1, 1.0), math.random(0, 9999), math.random(1, 3))
        shader_set_custom_param("game_time", math.random(0, 23), math.random(0, 59))
    else
        shader_set_custom_param("watch_actor_params", db.actor.health, db.actor.power, arc_radiation.get_radiation_dose(), watch_mode)
    end
end

local function update_watch_actor_params_2()
    if watch_mode == 2 and not has_alife_info("pre_blowout") then
        local satiety = db.actor.satiety
        local psy = db.actor.psy_health
        local overweight = overweight_level()
        local bleeding = 1.0 - db.actor:get_bleeding()
        shader_set_custom_param("watch_actor_params_2", satiety, psy, overweight < 0.0 and 0.0 or overweight, bleeding)
    end
end

local function on_update()
    if not db.actor:alive() or (has_alife_info("pre_blowout") and time_global() < delay) then
        return
    end

    delay = time_global() + 120

    update_watch_mode()
    update_game_time()
    update_watch_actor_params()
    update_watch_actor_params_2()
end

local function on_first_update()
    watch_mode = ogse.load_var("watch_mode", 1)
end

function attach(sm)
    sm:subscribe({signal = "on_key_down", fun = on_key_down})
    sm:subscribe({signal = "on_update", fun = on_update})
    sm:subscribe({signal = "on_first_update", fun = on_first_update})
end