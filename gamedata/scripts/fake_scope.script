-- based on:
-- CrookR 9/3/2021
-- Support for 2D scope shader, helper script for easier interfacing with engine. Uses


function attach(sm)
    sm:subscribe({ signal = "on_actor_weapon_fire",		fun = this.actor_on_weapon_fire	       })
    sm:subscribe({ signal = "on_actor_weapon_zoom_out",		fun = this.actor_on_weapon_zoom_out    })
    sm:subscribe({ signal = "on_actor_weapon_zoom_in",  	fun = this.actor_on_weapon_zoom_in     })
    sm:subscribe({ signal = "on_actor_weapon_zoom_switch",	fun = this.actor_on_weapon_zoom_switch })
    sm:subscribe({ signal = "on_actor_death",			fun = this.actor_on_before_death       })
end

local pnv_mode_save
local scope_radius
local zooming_t

function actor_on_weapon_fire()
    if get_con_bool("g_3d_scopes") then return end

    local wpn = db.actor:active_item()
    if not wpn then return end

    local ammo_mag_shot = wpn:get_magazine_size() * 0.2
    local snd_mag_shot = sound_object(get_string(wpn:section(), "snd_mag_shot"))
    snd_mag_shot:play(wpn, 0, sound_object.s2d)
    snd_mag_shot.volume = 0.9 - ((wpn:get_ammo_in_magazine() * 0.5) * 0.1)
    snd_mag_shot.frequency = math.clamp(0.95 + (wpn:get_ammo_in_magazine() * 0.01), 0.95, 1.0)
end

function actor_on_weapon_zoom_out()
    apply_pnv()
    cmd("scope_params_4 0.0, 1.25, 4.0")
end

function actor_on_weapon_zoom_switch()
    apply_pnv()
    cmd("scope_params_4 0.0, 1.25, 4.0")

    if get_con_bool("g_3d_scopes") then return end

    local wpn = db.actor:active_item()
    if not wpn then return end

    local wpn_w = wpn:get_weapon()
    if wpn_w and wpn_w:UseScopeTexture() then
        updateScope(wpn)
    end
end

function actor_on_weapon_zoom_in()
    pnv_mode_save = get_con_string("r_pnv_mode", 0)

    if get_con_bool("g_3d_scopes") then return end

    local wpn = db.actor:active_item()
    if not (wpn) then
        return
    end

    local wpn_w = wpn:get_weapon()
    if wpn_w and wpn_w:UseScopeTexture() then
        updateScope(wpn)
    end
end

function actor_on_before_death()
    cmd("scope_params_4 0.0, 1.25, 4.0")
    apply_pnv()
end

local scopeBaseFactors = {}

function updateScope(wpn)
    local scope_section
    if not wpn then return end
    local scopeName = nil
    if ogse_wpn_utils.get_scope_status(wpn) == 2 and ogse_wpn_utils.get_scope_flag(wpn) then
        local scope_section = get_string(wpn:section(), "scope_name")
        scopeName = get_string(scope_section, "scope_texture")
        nv_enable = get_bool(scope_section, "scope_night_vision")
    elseif ogse_wpn_utils.get_scope_status(wpn) == 1 then
        scopeName = get_string(wpn:section(), "scope_texture")
        nv_enable = get_bool(wpn:section(), "scope_night_vision")
    end

    if scopeName and fake_scope_radius.scope_radius[scopeName] then
        scope_radius = fake_scope_radius.scope_radius[scopeName]
        cmd("scope_params_4 " .. scope_radius .. ", 1.25" .. ", 10")
        local scope_section = get_string(wpn:section(), "scope_name")
        if nv_enable then
            zooming_t = dsh.wait_condition(
            function()
                local wpn = db.actor:active_item()
                if wpn and wpn.get_weapon then
                    return not (wpn:get_weapon().zoom_rotation_factor < 1)
                else
                    return true -- что б если пушка куда то пропала - не ждать вечно
                end
            end,

            function()
                zooming_t = nil
                if pnv_mode_save == "1" then
                    cmd("r_pnv_mode", 0)
                end
                apply_pnv(scope_section)
            end)
        end
    end
end

function apply_pnv(nv_sect)
    local function apply_settings(sect)
        if not sect then return end

        local color = get_vector(sect, "r_pnv_color")
        cmd("pnv_color", string.format("%f,%f,%f", color.x, color.y, color.z))
        cmd("r_pnv_noise", get_string(sect, "r_pnv_noise"))
        cmd("r_pnv_scanlines", get_string(sect, "r_pnv_scanlines"))
        cmd("r_pnv_scintillation", get_float(sect, "r_pnv_scintillation"))
        cmd("r_pnv_radius", get_float(sect, "r_pnv_radius", 0.5))
        cmd("r_pnv_num_tubes", get_float(sect, "r_pnv_num_tubes"))
        cmd("r_pnv_gain_current", get_float(sect, "r_pnv_gain_current"))
        cmd("r_pnv_gain_offset", get_float(sect, "r_pnv_gain_offset"))
        cmd("r_pnv_size_vignet", get_float(sect, "r_pnv_size_vignet"))
        cmd("r_pnv_alfa_vignete", get_float(sect, "r_pnv_alfa_vignete"))
        local pnv_wash_thresh = get_float(sect, "r_pnv_washout_thresh")
        cmd("r_pnv_washout_thresh", pnv_wash_thresh)
        log3("r_pnv_washout_thresh %s", pnv_wash_thresh)
        cmd("r_pnv_glitch", get_float(sect, "r_pnv_glitch"))
    end

    if nv_sect then
        local mode = get_u32(nv_sect, "r_pnv_mode", 0)
        apply_settings(nv_sect)
        cmd("r_pnv_mode", tostring(mode))
        cmd("r_pnv_position", 100)
    else
        local nv_slot = db.actor:item_in_slot(11)
        local mode = pnv_mode_save
        if nv_slot then
            apply_settings(nv_slot:section())
        end
        cmd("r_pnv_mode", tostring(mode))
    end
end
