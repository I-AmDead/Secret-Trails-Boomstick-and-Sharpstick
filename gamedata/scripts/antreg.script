local function on_first_update()
    if level.name() == "l09_deadcity" then
        if has_alife_info("eda_dialog_start") and not has_alife_info("skit_spawn") then
            db.actor:give_info_portion("skit_spawn")
        end

        if has_alife_info("about_magomet_dialog_start") and not has_alife_info("spawn_drug") then
            db.actor:give_info_portion("spawn_drug")
        end

        if has_alife_info("povodyr_mesto") and not has_alife_info("mg_nechto") then
            db.actor:give_info_portion("mg_nechto")
        end

        if has_alife_info("finish_put_start") and not has_alife_info("mg_nechto_start") then
            db.actor:give_info_portion("mg_nechto_start")
        end

        if not has_alife_info("lesnik_spawn") then
            db.actor:give_info_portion("lesnik_spawn")
        end

        if has_alife_info("graf_tri_dialog_done") and not has_alife_info("mg_maloy2_spawn") then
            db.actor:give_info_portion("mg_maloy2_spawn")
        end

        if has_alife_info("karina_poisk_dialog_start") and not has_alife_info("dogs_perehod") then
            db.actor:give_info_portion("dogs_perehod")
        end
    end

    if level.name() == "l10_red_forest" then
        if not has_alife_info("lesnichok_mafon") then
            db.actor:give_info_portion("lesnichok_mafon")
        end

        if has_alife_info("grig_swamp_dialog_done") and not has_alife_info("lesnik_cats_start") then
            db.actor:give_info_portion("lesnik_cats_start")
        end
    end

    if level.name() == "l13_deep" then
        if not has_alife_info("usa_spawn") then
            db.actor:give_info_portion("usa_spawn")
        end

        if has_alife_info("pekar_first_dialog_have") and not has_alife_info("psy_mir_spawn") then
            db.actor:give_info_portion("psy_mir_spawn")
        end

        if has_alife_info("voronin_zapiska_dialog_done") and not has_alife_info("barman_strelka_pogovority") then
            db.actor:give_info_portion("barman_strelka_pogovority")
        end

        if has_alife_info("voronin_zapiska_dialog_done") and not has_alife_info("wolki_mk_spawn") then
            db.actor:give_info_portion("wolki_mk_spawn")
        end
    end

    if level.name() == "l02_garbage" then
        if not has_alife_info("tankist_start") then
            db.actor:give_info_portion("tankist_start")
        end
    end

    if level.name() == "l03_agroprom" then
        if not has_alife_info("koldun_spawn") then
            db.actor:give_info_portion("koldun_spawn")
        end
    end

    if level.name() == "l04_darkvalley" then
        if not has_alife_info("gigant_x18_delete") then
            db.actor:give_info_portion("gigant_x18_delete")
        end

        if not has_alife_info("dolg_mafon_spawn") then
            db.actor:give_info_portion("dolg_mafon_spawn")
        end

        if has_alife_info("voronin_zapiska_dialog_start") and not has_alife_info("barman_start_delete") then
            db.actor:give_info_portion("barman_start_delete")
        end

        if has_alife_info("barman_posle_dialog_start") and not has_alife_info("barman_sidor_delete") then
            db.actor:give_info_portion("barman_sidor_delete")
        end
    end

    if level.name() == "l04u_labx18" then
        if has_alife_info("tankist_start_dialog_start") and not has_alife_info("zombak_spawn") then
            db.actor:give_info_portion("zombak_spawn")
        end

        if not has_alife_info("elchimera_start") then
            db.actor:give_info_portion("elchimera_start")
        end
    end

    if level.name() == "l05_bar" then
        if not has_alife_info("antirestr_spawn") then
            db.actor:give_info_portion("antirestr_spawn")
        end

        if not has_alife_info("totaliz_mos") then
            db.actor:give_info_portion("totaliz_mos")
        end
    end

    if level.name() == "l06_rostok" then
        if has_alife_info("lektor_dialog_start") and not has_alife_info("vertel_spawn") then
            db.actor:give_info_portion("vertel_spawn")
        end
    end

    if level.name() == "l07_military" then
        if not has_alife_info("osvedom_mafon_spawn") then
            db.actor:give_info_portion("osvedom_mafon_spawn")
        end

        if has_alife_info("povodyr_mesto") and not has_alife_info("ac_nechto") then
            db.actor:give_info_portion("ac_nechto")
        end
    end

    if level.name() == "l08_yantar" then
        if not has_alife_info("vas_delete") then
            db.actor:give_info_portion("vas_delete")
        end

        if not has_alife_info("vasil2_restrict_spawn") then
            db.actor:give_info_portion("vasil2_restrict_spawn")
        end

        if has_alife_info("vasil2_yantar") and not has_alife_info("vasil2_spawn") then
            db.actor:give_info_portion("vasil2_spawn")
            local patrol = patrol("lc_aver_yantar_desc")
            alife():teleport_object(id_by_sid(story_ids.vasil2), patrol:point(0), patrol:level_vertex_id(0), patrol:game_vertex_id(0))
        end

        if has_alife_info("vasil2_spawn") and not has_alife_info("zombi_zadan") then -- это зависит от верхнего, поэтому тоже пока пусть будет
            db.actor:give_info_portion("zombi_zadan")
        end
    end

    if level.name() == "l10_radar" then
        if not has_alife_info("spawn_rad_soldat") then
            db.actor:give_info_portion("spawn_rad_soldat")
        end
    end

    if level.name() == "l11_pripyat" then
        if not has_alife_info("mervin_anim") then
            db.actor:give_info_portion("mervin_anim")
        end
    end

    if level.name() == "l12_stancia" then
        if has_alife_info("monolit_bunker_doc_have") and not has_alife_info("klychara_spawn") then
            db.actor:give_info_portion("klychara_spawn")
        end
    end

    if level.name() == "l12u_sarcofag" then
        if has_alife_info("rule_konec") and not has_alife_info("pobeg_finish") then
            db.actor:give_info_portion("pobeg_finish")
        end

        if has_alife_info("monolit_bunker_doc_have") and not has_alife_info("iuda_spawn") then
            db.actor:give_info_portion("iuda_spawn")
        end

        if has_alife_info("prizrak_help_have") and not has_alife_info("iuda_delete") then
            db.actor:give_info_portion("iuda_delete")
        end

        if not has_alife_info("david_spawn") then
            db.actor:give_info_portion("david_spawn")
        end

        if has_alife_info("monolit_bunker_doc_have") and not has_alife_info("klyk_delete") then
            db.actor:give_info_portion("klyk_delete")
        end
    end

    if level.name() == "l12_stancia_2" then
        if not has_alife_info("dogs_ch2_spawn") then
            db.actor:give_info_portion("dogs_ch2_spawn")
        end

        if has_alife_info("gromov_second_dialog_done") and not has_alife_info("monolit_brat_spawn") then
            db.actor:give_info_portion("monolit_brat_spawn")
        end
    end

    if level.name() == "l12u_control_monolith" then
        if has_alife_info("pobeg_mesto") and not has_alife_info("pobeg_finish") then
            db.actor:give_info_portion("pobeg_finish")
        end

        if has_alife_info("pobeg_finish") and not has_alife_info("coda_final") then
            db.actor:give_info_portion("coda_final")
        end
    end

    if level.name() == "swamp" then
        if not has_alife_info("boloto_start") then
            db.actor:give_info_portion("boloto_start")
        end

        if not has_alife_info("boloto_zadan") then
            db.actor:give_info_portion("boloto_zadan")
        end

        if has_alife_info("karina_pda_est_start") and not has_alife_info("karina_razgovor") then
            db.actor:give_info_portion("karina_razgovor")
        end

        if has_alife_info("finish_put_start") and not has_alife_info("swamp_nechto") then
            db.actor:give_info_portion("swamp_nechto")
        end
    end
end

local function on_info()
    if level.name() == "l10_red_forest" then
        if has_alife_info("izba_dialog_start") and not has_alife_info("lesnik_del") then
            db.actor:give_info_portion("lesnik_del")
        end

        if has_alife_info("zahar_mesto") and not has_alife_info("sms_zahar") then
            db.actor:give_info_portion("sms_zahar")
        end
    end

    if level.name() == "l05_bar" then
        if has_alife_info("bar_help_done") and not has_alife_info("dolg_attak_start") then
            db.actor:give_info_portion("dolg_attak_start")
        end
    end

    if level.name() == "l06_rostok" then
        if has_alife_info("graf_tri_dialog_have") and not has_alife_info("perehod_yantar") then
            db.actor:give_info_portion("perehod_yantar")
        end
    end

    if level.name() == "l08_yantar" then
        if has_alife_info("vasil2_yantar") and not has_alife_info("vasil2_spawn") then
            db.actor:give_info_portion("vasil2_spawn")
            local patrol = patrol("lc_aver_yantar_desc")
            alife():teleport_object(id_by_sid(story_ids.vasil2), patrol:point(0), patrol:level_vertex_id(0), patrol:game_vertex_id(0))
        end

        if has_alife_info("vasil2_spawn") and not has_alife_info("zombi_zadan") then
            db.actor:give_info_portion("zombi_zadan")
        end
    end

    if level.name() == "l12_stancia_2" then
        if has_alife_info("monolit_pogovorils") and not has_alife_info("monolit_final") then
            db.actor:give_info_portion("monolit_final")
        end
    end

    if level.name() == "l12u_sarcofag" then
        if has_alife_info("rule_konec") and not has_alife_info("pobeg_finish") then -- тоже пока не понял
            db.actor:give_info_portion("pobeg_finish")
        end
    end

    if level.name() == "swamp" then
        if has_alife_info("doctor_enemy") and not has_alife_info("enemy_doctor") then
            db.actor:give_info_portion("enemy_doctor")
        end

        if has_alife_info("doctor_one_start") and not has_alife_info("klychara_delete") then
            db.actor:give_info_portion("klychara_delete")
        end
    end
end

local function storyline_mix()
    on_info()
    on_first_update()
end

function enemy_skit(community1, community2)
    relation_registry.set_community_goodwill("wanderer", "actor", -5000)
end

function enemy_bratva(community1, community2)
    relation_registry.set_community_goodwill("bratok", "actor", -5000)
end

function enemy_maroder(community1, community2)
    relation_registry.set_community_goodwill("maroder", "actor", -5000)
end

function enemy_nato(community1, community2)
    if db.actor:dont_has_info("maroder_enemy") then
        relation_registry.set_community_goodwill("usa", "actor", -10000)
        db.actor:give_info_portion("nato_enemy")
    end
end

function enemy_monolith(community1, community2)
    relation_registry.set_community_goodwill("monolith", "actor", -5000)
end

local function distance_check()
    if not has_alife_info("skit_start_dialog_done") or has_alife_info("skit_prishli") or has_alife_info("enemy_skit") then return end
    local postovoy = level_object_by_sid(story_ids.postovoy)
    if postovoy and distance_between(postovoy, db.actor) > 10 then
        db.actor:give_info_portion("enemy_skit")
    end
end

function sms_skit()
    db.actor:give_info_portion("postovoy_talk")
    news_manager.send_tip(db.actor, game.translate_string("sms_skit"))
end

----------------------------------lesnik--------------------------------------

function spawn_lesnik()
    tt2_fixes.hide_legs()
    local snd_obj = xr_sound.get_safe_sound_object([[new\start_affect]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
    level.add_cam_effector("camera_effects\\surge_01.anm", 6666, false, "tt2_fixes.show_legs")
    level.add_pp_effector("surge_fade.ppe", 11, false)
end

function hit_fist()
    level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "")
    level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
    level.add_pp_effector("total_recall.ppe", 2008, false)
    local snd_obj = xr_sound.get_safe_sound_object([[affects\hit_fist]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
    level.add_cam_effector("camera_effects\\hit_back_left.anm", 26, false, "")
end

function del_lesnik()
    local obj = alife():story_object(story_ids.lesnik)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_dogs_lesnik()
    spawn_patrol("dog_lesnik", "dog_mg")
    spawn_patrol("dog_lesnik", "dog_mg")
    spawn_patrol("dog_lesnik", "dog_mg")
    spawn_patrol("dog_lesnik", "dog_mg")
    spawn_patrol("dog_lesnik", "dog_mg")
end

function lesnik_dal_patrony(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit", "in", 1)
    dialogs.relocate_item_section(second_speaker, "bandage", "in", 2)
    dialogs.relocate_item_section(second_speaker, "ammo_12x70_buck", "in", 2)
end

function vasil_dal_colt(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit_scientic", "in", 1)
    dialogs.relocate_item_section(second_speaker, "bandage", "in", 2)
    dialogs.relocate_item_section(second_speaker, "wpn_colt1911_n", "in", 1)
    dialogs.relocate_item_section(second_speaker, "ammo_11.43x23_fmj", "in", 2)
end

function sahar_vas_nagrad(first_speaker, second_speaker)
    dialogs.relocate_money(first_speaker, 2000, "in") -- получаем деньги в награду
end

function sahar_lekarstvo(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "lekarstvo", "in", 1)
end

function lekarstvo_have(task, objective)
    return new_dialog.count_item("lekarstvo", 1)
end

function lekarstvo_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "lekarstvo", "out", 1)
end

------------------------------------leila--------------------------------------

function spawn_skit()
    local obj = spawn_patrol("leila_ohr1", "leila_ohr1_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr1.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr1)

    local obj = spawn_patrol("leila_ohr2", "leila_ohr2_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr2.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr2)

    local obj = spawn_patrol("leila_ohr3", "leila_ohr3_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr3_patrul.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr3)

    local obj = spawn_patrol("leila_ohr4", "leila_ohr4_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr4_patrul.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr4)

    local obj = spawn_patrol("leila_ohr5", "leila_ohr5_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr5.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr5)

    local obj = spawn_patrol("leila_ohr6", "leila_ohr6_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr6.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr6)

    local obj = spawn_patrol("leila_ohr7", "leila_ohr7_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\leila_ohr7_patrul.ltx"
    alife():assign_story_id(obj.id, story_ids.leila_ohr7)

    local obj = spawn_patrol("skit_trader", "skit_trader")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\skit_trader.ltx"
    alife():assign_story_id(obj.id, story_ids.skit_trader)

    local obj = spawn_patrol("skit_patrul1", "patrul1_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\skit_patrul1.ltx"
    alife():assign_story_id(obj.id, story_ids.skit_patrul1)
end

---------------------------------------------------------------------------------

function droby_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit", "in", 1)
    dialogs.relocate_item_section(second_speaker, "ammo_12x70_buck", "in", 2)
end

function proviziya_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "proviziya", "in", 1)
end

function proviziya_have(task, objective)
    return new_dialog.count_item("proviziya", 1)
end

function proviziya_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "proviziya", "out", 1)
end

----------------------------------demon----------------------------------

function spawn_demon_ohr()
    local obj = spawn_patrol("demon_ohr1", "demon_ohr1_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\demon_ohr1.ltx"
    alife():assign_story_id(obj.id, story_ids.demon_ohr1)

    local obj = spawn_patrol("demon_ohr2", "demon_ohr2_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\demon_ohr2.ltx"
    alife():assign_story_id(obj.id, story_ids.demon_ohr2)

    local obj = spawn_patrol("demon_ohr3", "demon_ohr3_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\demon_ohr3_patrul.ltx"
    alife():assign_story_id(obj.id, story_ids.demon_ohr3)

    local obj = spawn_patrol("demon_ohr4", "demon_ohr4_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\demon_ohr4_patrul.ltx"
    alife():assign_story_id(obj.id, story_ids.demon_ohr4)

    local obj = spawn_patrol("demon_ohr5", "demon_ohr5_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\demon_ohr5.ltx"
    alife():assign_story_id(obj.id, story_ids.demon_ohr5)
end

function demon_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "nebo_light_outfit", "in", 1)
    dialogs.relocate_item_section(second_speaker, "wpn_abakan_n", "in", 1)
    dialogs.relocate_item_section(second_speaker, "ammo_5.45x39_fmj", "in", 4)
end

function spawn_dom()
    spawn_patrol("dom_zombi1", "dom_zombi5")
    spawn_patrol("dom_zombi2", "dom_zombi5")
    spawn_patrol("dom_zombi3", "dom_zombi5")
    spawn_patrol("dom_zombi4", "dom_zombi5")
    spawn_patrol("dom_zombi5", "dom_zombi5")
    spawn_patrol("dom_zombi6", "dom_zombi5")
    spawn_patrol("dom_zombi7", "dom_zombi5")
    spawn_patrol("dom_zombi8", "dom_zombi5")
    spawn_patrol("dom_zombi9", "dom_zombi5")
    spawn_patrol("dom_zombi10", "dom_zombi5")
end

function dom_have(task, info)
    if db.actor and db.actor:has_info("dom_zombi1_dead") and db.actor:has_info("dom_zombi2_dead") and
        db.actor:has_info("dom_zombi3_dead") and db.actor:has_info("dom_zombi4_dead") and
        db.actor:has_info("dom_zombi5_dead") and db.actor:has_info("dom_zombi6_dead") and
        db.actor:has_info("dom_zombi7_dead") and db.actor:has_info("dom_zombi8_dead") and
        db.actor:has_info("dom_zombi9_dead") and db.actor:has_info("dom_zombi10_dead") then
        return db.actor:give_info_portion("demon_start_dialog_have")
    end
    return false
end

-------------------------------------------mandra2-------------------------------------------

function spawn_mandra2()
    braad_test.spawn_ai_location("mandra", vector():set(-176.582, 2.269, -32.789), "l10_red_forest")
    braad_test.spawn_ai_location("mandra", vector():set(-110.121, -4.184, -57.806), "l10_red_forest")
    braad_test.spawn_ai_location("mandra", vector():set(-121.612, -4.195, -41.164), "l10_red_forest")
    spawn_patrol("polter1_mandra", "polter_mandra")
    spawn_patrol("polter2_mandra", "polter_mandra")
end

function mandra2_have(task, objective)
    return new_dialog.count_item("mandra", 3)
end

function spawn_kontrik()
    spawn_patrol("kontrik_mandra", "kontrik_mandra")
end

function mandra2_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mandra", "out", 3)
    dialogs.relocate_money(first_speaker, 45000, "in") -- получаем деньги в награду
end

---------------------------------------grig--------------------------------------------------

function spawn_dogs_grig()
    spawn_patrol("dog_grig1", "dog_grig1")
    spawn_patrol("dog_grig1", "dog_grig1")
    spawn_patrol("dog_grig2", "dog_grig1")
    spawn_patrol("dog_grig2", "dog_grig1")
    spawn_patrol("dog_grig3", "dog_grig1")
    spawn_patrol("dog_grig3", "dog_grig1")
    spawn_patrol("dog_grig4", "dog_grig2")
    spawn_patrol("dog_grig4", "dog_grig2")
    spawn_patrol("dog_grig5", "dog_grig2")
    spawn_patrol("dog_grig5", "dog_grig2")
    spawn_patrol("dog_grig6", "dog_grig2")
    spawn_patrol("dog_grig6", "dog_grig2")
    spawn_patrol("dog_grig7", "dog_grig3")
    spawn_patrol("dog_grig7", "dog_grig3")
    spawn_patrol("dog_grig8", "dog_grig3")
    spawn_patrol("dog_grig8", "dog_grig3")
    spawn_patrol("dog_grig9", "dog_grig3")
    spawn_patrol("dog_grig9", "dog_grig3")
end

function hvosty_have(task, objective)
    return new_dialog.count_item("mutant_dog_tail", 10)
end

function hvosty_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mutant_dog_tail", "out", 10)
end

-----------------------------------doctor_mutantes_spawn----------------------------------

function spawn_doctor_mutantes()
    spawn_patrol("doc_bloodsucker", "bloodsucker_doc_walk")
    spawn_patrol("doc_pseudodog", "pseudodog_doc_walk")
    spawn_patrol("doc_izlom1", "izlom1_doc_walk")
    spawn_patrol("doc_izlom2", "izlom2_doc_walk")
    spawn_patrol("doc_flesh", "flesh_doc_walk")
    spawn_patrol("doc_cat", "cat_doc_walk")
    spawn_patrol("swamp_skit1", "swamp_skit1_walk")
    spawn_patrol("swamp_skit2", "swamp_skit2_walk")
    spawn_patrol("swamp_skit3", "swamp_skit3_walk")
    spawn_patrol("swamp_skit4", "swamp_skit4_walk")
    spawn_patrol("swamp_skit5", "swamp_skit5_walk")
    spawn_patrol("swamp_skit6", "swamp_skit6_walk")
    spawn_patrol("swamp_skit7", "swamp_skit7_walk")
    spawn_patrol("swamp_skit8", "swamp_skit8_walk")
end

function enemy_doc()
    local obj = level_object_by_sid(story_ids.swamp_doctor)
    if obj then
        obj:set_relation(game_object.enemy, db.actor)
    end
end

------------------------------------dolg_attak_bar----------------------------------------

function spawn_dolg_attak()
    spawn_patrol("dolg_attak1", "dolg_attak1_walk")
    spawn_patrol("dolg_attak2", "dolg_attak2_walk")
    spawn_patrol("dolg_attak3", "dolg_attak3_walk")
    spawn_patrol("dolg_attak4", "dolg_attak4_walk")
    spawn_patrol("dolg_attak5", "dolg_attak5_walk")
    spawn_patrol("dolg_attak6", "dolg_attak6_walk")
    spawn_patrol("dolg_attak9", "dolg_attak9_walk")
    spawn_patrol("dolg_attak10", "dolg_attak10_walk")
    spawn_patrol("bratok_attak1", "bratok_attak1_walk")
    spawn_patrol("bratok_attak2", "bratok_attak2_walk")
    spawn_patrol("bratok_attak3", "bratok_attak3_walk")
end

function spawn_voronin_ohr()
    spawn_patrol("voronin_ohr1", "voronin_ohr1_walk")
    spawn_patrol("voronin_ohr2", "voronin_ohr2_walk")
    spawn_patrol("voronin_ohr3", "voronin_ohr3_walk")
end

function dolg_attak_dialog_have(task, info)
    if db.actor and db.actor:has_info("plichko_mesto") and
        db.actor:has_info("dolg_attak8_mesto") and db.actor:has_info("knyaz_dead") and
        db.actor:has_info("bratok_attak1_dead") and db.actor:has_info("bratok_attak2_dead") and
        db.actor:has_info("bratok_attak3_dead") then
        return db.actor:give_info_portion("dolg_attak_dialog_have")
    end
    return false
end

function spawn_voronin_bratki()
    spawn_patrol("bratok_voronin1", "bratok_voronin1_walk")
    spawn_patrol("bratok_voronin2", "bratok_voronin2_walk")
    spawn_patrol("bratok_voronin3", "bratok_voronin3_walk")
    spawn_patrol("bratok_voronin4", "bratok_voronin4_walk")
end

function voronin_bar_dialog_have(task, info)
    if db.actor and db.actor:has_info("voronin_mesto") then
        return db.actor:give_info_portion("voronin_bar_dialog_have")
    end
    return false
end

function voronin_bar_dialog_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "dolg_black_exoskeleton", "in", 1)
end

function del_voronin()
    local obj = alife():story_object(story_ids.dolg_leader)
    if obj then
        alife():release(obj, true)
    end
end

function del_barman_dolg()
    local obj = alife():story_object(story_ids.barman_dolg)
    if obj then
        alife():release(obj, true)
    end
end

---------------------------------------pripyat--------------------------------------------

function spawn_dogs_chaes2()
    spawn_patrol("dog_ch2", "dogs_ch2")
    spawn_patrol("dog_ch2", "dogs_ch2")
    spawn_patrol("dog_ch2", "dogs_ch2")
    spawn_patrol("dog_ch2", "dogs_ch2")
    spawn_patrol("dog_ch2", "dogs_ch2")
end

function spawn_pripyat()
    level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "")
    level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
    level.add_pp_effector("total_recall.ppe", 2008, false)
    local snd_obj = xr_sound.get_safe_sound_object([[new\start_affect]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
    level.add_cam_effector("camera_effects\\hit_back_right.anm", 26, false, "")
end

function del_grig()
    local obj = alife():story_object(story_ids.grig)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_chaes_medik()
    spawn_patrol("medik_bloodsucker", "krovosos_chaes")
    spawn_patrol("medik_bloodsucker", "krovosos_chaes")
    spawn_patrol("medik_dog", "sobaka_chaes")
    spawn_patrol("medik_dog", "sobaka_chaes")
    spawn_patrol("medik_dog", "sobaka_chaes")
    spawn_patrol("medik_dog", "sobaka_chaes")
    spawn_patrol("medik_dog", "sobaka_chaes")
    spawn_patrol("medik_dog", "sobaka_chaes")
end

function spawn_tankist_ohr()
    spawn_patrol("tankist_ohr1", "tankist_ohr1_walk")
    spawn_patrol("tankist_ohr2", "tankist_ohr2_walk")
    spawn_patrol("tankist_ohr3", "tankist_ohr2_walk")
    spawn_patrol("tankist_ohr4", "tankist_ohr4_walk")
    spawn_patrol("tankist_mafon", "tankist_walk")
end

-----------------------------------usa_baza_spawn-------------------------------------------

function spawn_usa_baza()
    spawn_patrol("nato_antigas1", "antigas1_walk")
    spawn_patrol("nato_antigas2", "antigas2_walk")
    spawn_patrol("nato_antigas3", "antigas3_walk")
    spawn_patrol("nato_antigas4", "antigas4_walk")
    spawn_patrol("nato_antigas5", "antigas5_walk")
    spawn_patrol("nato_antigas6", "antigas6_walk")
    spawn_patrol("nato_specnaz1", "specnaz1_walk")
    spawn_patrol("nato_specnaz2", "specnaz2_walk")
    spawn_patrol("nato_specnaz3", "specnaz3_walk")
    spawn_patrol("nato_specnaz4", "specnaz4_walk")
    spawn_patrol("nato_specnaz5", "specnaz5_walk")
    spawn_patrol("nato_specnaz6", "specnaz6_walk")
    spawn_patrol("nato_mask1", "nato_mask1_walk")
    spawn_patrol("nato_mask2", "nato_mask2_walk")
    spawn_patrol("nato_mask3", "nato_mask3_walk")
    spawn_patrol("nato_mask4", "nato_mask4_walk")
    spawn_patrol("nato_mask5", "nato_mask5_walk")
    spawn_patrol("nato_mask6", "nato_mask6_walk")
end

-------------------------------usa_blokpost_spawn---------------------------------

function spawn_usa_blokpost()
    spawn_patrol("usa_antigas1", "usa_antigas1_walk")
    spawn_patrol("usa_antigas2", "usa_antigas2_walk")
    spawn_patrol("usa_antigas3", "usa_antigas3_walk")
    spawn_patrol("usa_mask1", "usa_mask1_walk")
    spawn_patrol("usa_mask2", "usa_mask2_walk")
    spawn_patrol("usa_mask3", "usa_mask3_walk")
    spawn_patrol("usa_specnaz1", "usa_specnaz1_walk")
    spawn_patrol("usa_specnaz2", "usa_specnaz2_walk")
end

-------------------------------stalkers_predbannik_spawn---------------------------------

function spawn_stalkers_pred()
    spawn_patrol("stalker_pred1", "stalker_pred1_walk")
    spawn_patrol("stalker_pred2", "stalker_pred2_walk")
    spawn_patrol("stalker_pred3", "stalker_pred3_walk")
    spawn_patrol("stalker_pred4", "stalker_pred4_walk")
    spawn_patrol("stalker_pred5", "stalker_pred5_walk")
    spawn_patrol("stalker_pred6", "stalker_pred6_walk")
    spawn_patrol("stalker_pred7", "stalker_pred7_walk")
    spawn_patrol("stalker_pred8", "stalker_pred8_walk")
end

-------------------------------------hunters_spawn---------------------------------------

function spawn_hunters_aver()
    spawn_patrol("mazay", "mazay_walk")
    spawn_patrol("hunter1", "hunter1_walk")
    spawn_patrol("hunter2", "hunter2_walk")
end

function spawn_hunter_mafon()
    alife_create("hunter_mafon", "l10_red_forest", vector():set(192.378, -6.320, -114.478))
end

function spawn_zahar()
    local obj = spawn_patrol("zahar", "zahar_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\hunters\\zahar.ltx"
    alife():assign_story_id(obj.id, story_ids.zahar)
end

function del_zahar()
    local obj = alife():story_object(story_ids.zahar)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_zahar2()
    local obj = spawn_patrol("zahar", "zahar_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\hunters\\zahar2.ltx"
    alife():assign_story_id(obj.id, story_ids.zahar2)
end

--------------------------------------swamp_doctor---------------------------------------

function doctor_kostolom_spawn()
    local obj = spawn_patrol("doctor_kostolom", "doctor_kostolom")
    level_tasks.add_location_by_id(obj.id, "crlc_big", game.translate_string("metka_kostolom"))
end

local function spider_kostolom_spawn(obj, amount, local_direction, who, bone_index)
    if obj:section() == "doctor_kostolom" then
        alife():create("spider_kostolom", obj:position(), obj:level_vertex_id(), obj:game_vertex_id())
    end
end

local function spider_kostolom_dead()
    if db.actor:dont_has_info("doctor_kostolom_dead") or db.actor:has_info("doctor_kostolom_done")then
        return
    end
    for id, obj in alife():objects() do
        local spider = level.object_by_id(id)
        if spider and spider:section() == "spider_kostolom" and spider:alive() then
            local hit = hit()
            hit.direction = spider:direction()
            hit.impulse = 1000
            hit.draftsman = spider
            hit.power = 1000
            hit.type = hit.wound
            spider:hit(hit)
        end
    end
end

function spawn_sar_pauki()
    spawn_patrol("spider_sar", "sar_pauki")
end

function remove_metka_kostolom()
    for a, obj in alife():objects() do
        if obj:section_name() == "doctor_kostolom" then
            level_tasks.remove_location_by_id(obj.id, "crlc_big")
            break
        end
    end
end

function doctor_kostolom_have(task, info)
    return db.actor and db.actor:has_info("doctor_kostolom_dead")
end

function doctor_kostolom_done(first_speaker, second_speaker)
    dialogs.relocate_money(first_speaker, 5000, "in")
end

-----------------------------------swamp_kent-------------------------------

function spawn_kent()
    local obj = spawn_patrol("swamp_kent", "kent_walk1")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\swamp_kent.ltx"
    alife():assign_story_id(obj.id, story_ids.swamp_kent)
end

function spawn_zamery_babki()
    spawn_patrol("babka_01", "swamp_zombie_babka")
    spawn_patrol("babka_02", "swamp_zombie_babka")
    spawn_patrol("babka_03", "swamp_zombie_babka")
    spawn_patrol("babka_04", "swamp_zombie_babka")
    spawn_patrol("babka_05", "swamp_zombie_babka")
    spawn_patrol("babka_06", "swamp_zombie_babka")
end

function babki_dead(task, info)
    if db.actor and db.actor:has_info("babka_01_dead") and db.actor:has_info("babka_02_dead") and
        db.actor:has_info("babka_03_dead") and db.actor:has_info("babka_04_dead") and db.actor:has_info("babka_05_dead") and
        db.actor:has_info("babka_06_dead") then
        return db.actor:give_info_portion("babki_dead")
    end
    return false
end

function spawn_bookmaker()
    local obj = spawn_patrol("bookmaker", "zulus_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\bookmaker.ltx"
    alife():assign_story_id(obj.id, story_ids.bookmaker)
end

function lesnik_cats_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "out", 1)
end

function medkit1_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit", "in", 2)
end

function medkit2_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit_army", "in", 2)
end

function medkit3_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit_scientic", "in", 2)
end

function grek_patrony_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "ammo_5.45x39_ap", "in", 3)
    dialogs.relocate_item_section(second_speaker, "ammo_12x76_dart", "in", 2)
end

function spawn_ohota_boars()
    spawn_patrol("ohota_boar1", "ohota_boars")
    spawn_patrol("ohota_boar2", "ohota_boars")
    spawn_patrol("ohota_boar3", "ohota_boars")
    spawn_patrol("ohota_boar4", "ohota_boars")
    spawn_patrol("ohota_boar5", "ohota_boars")
    spawn_patrol("ohota_boar6", "ohota_boars")
end

function ohota_boars_have(task, info)
    if db.actor and db.actor:has_info("ohota_boar1_dead") and db.actor:has_info("ohota_boar2_dead") and
        db.actor:has_info("ohota_boar3_dead") and db.actor:has_info("ohota_boar4_dead") and
        db.actor:has_info("ohota_boar5_dead") and db.actor:has_info("ohota_boar6_dead") and
        db.actor:has_info("grek_mesto") then
        return db.actor:give_info_portion("ohota_boars_have")
    end
    return false
end

function sms_zahar()
    db.actor:give_info_portion("zahar_talk")
    news_manager.send_tip(db.actor, game.translate_string("sms_zahar"))
end

function spawn_zahar_dogs()
    spawn_patrol("zahar_dog1", "zahar_dogs")
    spawn_patrol("zahar_dog2", "zahar_dogs")
    spawn_patrol("zahar_dog3", "zahar_dogs")
    spawn_patrol("zahar_dog4", "zahar_dogs")
    spawn_patrol("zahar_dog5", "zahar_dogs")
    spawn_patrol("zahar_dog6", "zahar_dogs")
end

function spawn_podmoga1()
    local obj = spawn_patrol("esc_podmoga1", "podmoga1_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\stalkers\\esc_podmoga1.ltx"
    alife():assign_story_id(obj.id, story_ids.esc_podmoga1)
end

function spawn_podmoga()
    spawn_patrol("esc_podmoga2", "podmoga2_walk")
    spawn_patrol("esc_podmoga3", "podmoga3_walk")
end

function spawn_podmoga_dogs()
    spawn_patrol("podmoga_dog1", "podmoga_dogs")
    spawn_patrol("podmoga_dog1", "podmoga_dogs")
    spawn_patrol("podmoga_dog1", "podmoga_dogs")
    spawn_patrol("podmoga_dog2", "podmoga_dogs")
    spawn_patrol("podmoga_dog2", "podmoga_dogs")
    spawn_patrol("podmoga_dog2", "podmoga_dogs")
end

function spawn_uchen_zombak()
    spawn_patrol("uchen_zombak", "zombak_walk")
end

function tankist_stvol_have(task, objective)
    return new_dialog.count_item("wpn_grozm", 1)
end

function tankist_stvol_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_grozm", "out", 1)
    dialogs.relocate_item_section(first_speaker, "doc_krol", "out", 1)
end

function barman_pismo_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "barman_pismo", "in", 1)
    dialogs.relocate_item_section(second_speaker, "propusk", "in", 1)
end

function barman_pismo_have(first_speaker, second_speaker)
    return new_dialog.count_item("barman_pismo", 1)
end

function barman_pismo_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "barman_pismo", "out", 1)
end

function propusk_have(task, objective)
    return new_dialog.count_item("propusk", 1)
end

function propusk_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "propusk", "out", 1)
end

function sidor_cognac_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "cognac", "in", 5)
end

function cognac_have(task, objective)
    return new_dialog.count_item("cognac", 5)
end

function cognac_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "cognac", "out", 5)
end

function brown_money(first_speaker, second_speaker)
    dialogs.relocate_money(first_speaker, 20000, "in") -- получаем деньги в награду
end

function spawn_foster_dogs()
    spawn_patrol("foster_dog", "foster_dog")
    spawn_patrol("foster_dog", "foster_dog")
    spawn_patrol("foster_dog", "foster_dog")
    spawn_patrol("foster_dog", "foster_dog")
    spawn_patrol("foster_dog", "foster_dog")
    spawn_patrol("foster_dog", "foster_dog")
end

function del_foster()
    local obj = alife():story_object(story_ids.foster)
    if obj then
        alife():release(obj, true)
    end
end

function del_grek()
    local obj = alife():story_object(story_ids.grek)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_grek2()
    local obj = spawn_patrol("grek2", "grek_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\hunters\\grek2.ltx"
    alife():assign_story_id(obj.id, story_ids.grek2)
end

function brown_patrony(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "eot", "in", 1)
    dialogs.relocate_item_section(second_speaker, "wpn_m4_tac", "in", 1)
    dialogs.relocate_item_section(second_speaker, "ammo_5.56x45_ap", "in", 5)
    dialogs.relocate_item_section(second_speaker, "grenade_f1", "in", 3)
    dialogs.relocate_item_section(second_speaker, "medkit_army", "in", 3)
    dialogs.relocate_item_section(second_speaker, "bandage", "in", 3)
end

function usa_ataka()
    spawn_patrol("mir1", "mir1_walk")
    spawn_patrol("mir2", "mir2_walk")
    spawn_patrol("mir3", "mir3_walk")
    spawn_patrol("mir4", "mir4_walk")
    spawn_patrol("mir5", "mir5_walk")
end

function spawn_monstry_mir()
    spawn_patrol("uchen_zombik", "zombik_walk")
    spawn_patrol("m_mir1", "mir_monsrty1")
    spawn_patrol("m_mir11", "mir_monsrty1")
    spawn_patrol("m_mir111", "mir_monsrty1")
    spawn_patrol("m_mir1111", "mir_monsrty1")
    spawn_patrol("m_mir2", "mir_monsrty2")
    spawn_patrol("m_mir22", "mir_monsrty2")
    spawn_patrol("m_mir222", "mir_monsrty2")
    spawn_patrol("m_mir2222", "mir_monsrty2")
    spawn_patrol("m_mir22222", "mir_monsrty2")
    spawn_patrol("m_mir3", "mir_monsrty1")
    spawn_patrol("m_mir33", "mir_monsrty1")
    spawn_patrol("m_mir4", "mir_monsrty1")
    spawn_patrol("m_mir44", "mir_monsrty1")
    spawn_patrol("m_mir444", "mir_monsrty1")
end

function brown_baza_dialog_have(task, info)
    if db.actor and db.actor:has_info("zombik_dead") and db.actor:has_info("m_mir1_dead") and
        db.actor:has_info("m_mir11_dead") and db.actor:has_info("m_mir111_dead") and db.actor:has_info("m_mir1111_dead") and
        db.actor:has_info("m_mir2_dead") and db.actor:has_info("m_mir22_dead") and db.actor:has_info("m_mir222_dead") and
        db.actor:has_info("m_mir2222_dead") and db.actor:has_info("m_mir22222_dead") and
        db.actor:has_info("m_mir3_dead") and db.actor:has_info("m_mir33_dead") and db.actor:has_info("m_mir4_dead") and
        db.actor:has_info("m_mir44_dead") and db.actor:has_info("m_mir444_dead") then
        return db.actor:give_info_portion("brown_baza_dialog_have")
    end
    return false
end

function brown_nagrada_rem(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "repair_kit", "in", 1)
end

function brown_aptechki(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "medkit_army", "in", 2)
    dialogs.relocate_item_section(second_speaker, "grenade_f1", "in", 2)
end

function razvedka_spawn()
    spawn_patrol("fab_zombi1", "fabrika_zomb1")
    spawn_patrol("fab_zombi1", "fabrika_zomb1")
    spawn_patrol("fab_zombi2", "fabrika_zomb1")
    spawn_patrol("fab_zombi3", "fabrika_zomb1")
    spawn_patrol("fab_zombi8", "fabrika_zomb1")
    spawn_patrol("fab_zombi4", "fabrika_zomb2")
    spawn_patrol("fab_zombi4", "fabrika_zomb2")
    spawn_patrol("fab_zombi5", "fabrika_zomb2")
    spawn_patrol("fab_zombi5", "fabrika_zomb2")
    spawn_patrol("fab_zombi6", "fabrika_zomb2")
    spawn_patrol("fab_zombi7", "fabrika_zomb2")
    spawn_patrol("fab_zombi9", "fabrika_zomb2")
    spawn_patrol("fab_zombi10", "fabrika_zomb2")
    spawn_patrol("fab_zombi10", "fabrika_zomb2")
    spawn_patrol("fab_zombi11", "fabrika_zomb2")
    spawn_patrol("fab_zombi12", "fabrika_zomb2")
end

function spawn_fab_trup()
    local obj = alife_create("fab_trup", "l13_deep", vector():set(-246.05, 10.54, 225.39))
    level_tasks.add_location_by_id(obj.id, "crlc_big", game.translate_string("metka_fab"))
    alife():assign_story_id(obj.id, story_ids.fab_trup)
    obj:set_health(0)
end

function remove_metka_fab()
    for a, obj in alife():objects() do
        if obj:section_name() == "fab_trup" then
            level_tasks.remove_location_by_id(obj.id, "crlc_big")
            break
        end
    end
end

function brown_fabrika_have(task, objective)
    return new_dialog.count_item("pda_mir", 1)
end

function pda_mir_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "pda_mir", "out", 1)
    dialogs.relocate_item_section(second_speaker, "wpn_m4_butcher", "in", 1)
end

function sidor_pismo_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "sidor_pismo", "in", 1)
end

function sidor_pismo_have(first_speaker, second_speaker)
    return new_dialog.count_item("sidor_pismo", 1)
end

function sidor_pismo_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "sidor_pismo", "out", 1)
end

function drug_spawn()
    spawn_patrol("drug_magometa", "drug_walk")
end

--------------------------------------babki_karina-----------------------------------

function babki_spawn()
    local obj = spawn_patrol("babka_brown", "babka_brown_walk")
    alife():assign_story_id(obj.id, story_ids.babka_brown)

    local obj = spawn_patrol("babka_blue", "babka_blue_walk")
    alife():assign_story_id(obj.id, story_ids.babka_blue)
end

function delete_babka_brown()
    local obj = alife():story_object(story_ids.babka_brown)
    if obj then
        alife():release(obj, true)
    end
end

function delete_babka_blue()
    local obj = alife():story_object(story_ids.babka_blue)
    if obj then
        alife():release(obj, true)
    end
end

function babka_kontra_spawn()
    spawn_patrol("babka_kontra", "karina_les")
    spawn_patrol("karina_kontra1", "karina_les")
end

function babka_kontra_dead(task, info)
    if db.actor and db.actor:has_info("babka_kontrik_dead") and db.actor:has_info("karina_kontra1_dead") then
        return db.actor:give_info_portion("babka_kontro_dead")
    end
    return false
end

function nebo_prov_spawn()
    local obj = spawn_patrol("nebo_prov", "nebo_prov")
    alife():assign_story_id(obj.id, story_ids.nebo_prov)
    obj:set_health(0)
end

function pda_nebo_have(task, objective)
    return new_dialog.count_item("pda_nebo", 1)
end

function pda_nebo_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "pda_nebo", "out", 1)
end

function spawn_dogs_perehod()
    spawn_patrol("mg_dog_perehod1", "dogs_mg")
    spawn_patrol("mg_dog_perehod1", "dogs_mg")
    spawn_patrol("mg_dog_perehod1", "dogs_mg")
    spawn_patrol("mg_dog_perehod1", "dogs_mg")
    spawn_patrol("mg_dog_perehod2", "dogs_mg")
    spawn_patrol("mg_dog_perehod2", "dogs_mg")
end

function spawn_burer_les()
    spawn_patrol("spider_weak", "polter_mandra")
    spawn_patrol("spider_weak", "polter_mandra")
    spawn_patrol("spider_mini", "polter_mandra")
    spawn_patrol("spider_mini", "polter_mandra")
    spawn_patrol("spider_mini", "polter_mandra")
    spawn_patrol("spider_mini", "polter_mandra")
    spawn_patrol("spider_mini", "polter_mandra")
    spawn_patrol("spider_mini", "polter_mandra")
end

function spawn_karina2()
    local obj = spawn_patrol("karina2", "karina22_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\karina2.ltx"
    alife():assign_story_id(obj.id, story_ids.karina2)
end

function del_karina()
    local obj = alife():story_object(story_ids.karina)
    if obj then
        alife():release(obj, true)
    end
end

function voronin_pismo_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "voronin_pismo", "in", 1)
end

function voronin_pismo_have(first_speaker, second_speaker)
    return new_dialog.count_item("voronin_pismo", 1)
end

function voronin_pismo_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "voronin_pismo", "out", 1)
end

function voronin_pismo2_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "voronin_pismo2", "in", 1)
end

function voronin_pismo2_have(first_speaker, second_speaker)
    return new_dialog.count_item("voronin_pismo2", 1)
end

function voronin_pismo2_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "voronin_pismo2", "out", 1)
end

function del_barman_start()
    local obj = alife():story_object(story_ids.Escape_Trader)
    if obj then
        alife():release(obj, true)
    end
end

function del_sidor_mir()
    local obj = alife():story_object(story_ids.sidor)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_sidor_ohr()
    spawn_patrol("sidor_ohr1", "sidor_ohr1_walk")
    spawn_patrol("sidor_ohr2", "sidor_ohr2_walk")
end

function del_barman_stalker()
    local obj = alife():story_object(story_ids.barman_stalker)
    if obj then
        alife():release(obj, true)
    end
end

function del_sidor_stalker()
    local obj = alife():story_object(story_ids.sidor_stalker)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_sidor_old()
    local obj = alife_create("sidor_old", "l01_escape", vector():set(-244.30, -24.87, -133.83))
    obj.angle = vector():set(0.015708, 1.651081, 0.0174533)
    obj.custom_data = "[logic]\ncfg = scripts\\predbannik\\predbannik_trader.ltx"
    alife():assign_story_id(obj.id, story_ids.sidor_old)
end

function spawn_magomet()
    local obj = spawn_patrol("magomet", "magomet_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\magomet.ltx"
    alife():assign_story_id(obj.id, story_ids.magomet)
end

function karta_bar_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "karta_bar", "in", 1)
end

function karta_bar_have(first_speaker, second_speaker)
    return new_dialog.count_item("karta_bar", 1)
end

function karta_bar_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "karta_bar", "out", 1)
end

function barman_new_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "wpn_pkp_tac_siber", "in", 1)
    dialogs.relocate_money(first_speaker, 100000, "in")
end

function spawn_dog_povodyr()
    local obj = spawn_patrol("dog_povodyr", "dog_povodyr1_walk")
    alife():assign_story_id(obj.id, story_ids.dog_povodyr)
end

function spawn_cats_povodyr()
    spawn_patrol("cat_povodyr", "cats_swamp")
    spawn_patrol("cat_povodyr", "cats_swamp")
    spawn_patrol("cat_povodyr", "cats_swamp")
    spawn_patrol("cat_povodyr", "cats_swamp")
    spawn_patrol("cat_povodyr", "cats_swamp")
    spawn_patrol("cat_povodyr", "cats_swamp")
    spawn_patrol("cat_povodyr1", "cats_swamp1")
    spawn_patrol("cat_povodyr1", "cats_swamp1")
    spawn_patrol("cat_povodyr1", "cats_swamp1")
    spawn_patrol("cat_povodyr1", "cats_swamp1")
end

function del_povodyr()
    local obj = alife():story_object(story_ids.dog_povodyr)
    if obj then
        level_tasks.remove_location_by_id(obj.id, "blue_location")
        alife():release(obj, true)
    end
end

function doktor_flashka_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "doktor_flashka", "in", 1)
end

function doktor_flashka_have(first_speaker, second_speaker)
    return new_dialog.count_item("doktor_flashka", 1)
end

function doktor_flashka_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "doktor_flashka", "out", 1)
end

function spawn_mg_nechto()
    spawn_patrol("mg_zomb1", "zomb_mg")
    spawn_patrol("mg_zomb2", "zomb_mg")
    spawn_patrol("mg_zomb3", "zomb_mg")
    spawn_patrol("mg_zomb4", "zomb_mg")
    spawn_patrol("mg_zomb5", "zomb_mg")
    spawn_patrol("mg_zomb6", "zomb_mg")
    spawn_patrol("mg_zomb7", "zomb_mg")
    spawn_patrol("mg_zomb8", "zomb_mg")
    spawn_patrol("mg_zomb9", "zomb_mg")
    spawn_patrol("mg_zomb10", "zomb_mg")
end

function spawn_ac_nechto()
    spawn_patrol("ac_kontra", "ac_nechto")
    spawn_patrol("ac_krovosos", "ac_nechto")
    spawn_patrol("ac_krovosos", "ac_nechto")
end

function spawn_swamp_nechto()
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
    spawn_patrol("swamp_snork", "snork_swamp")
end

function sverhprovodnik_have(first_speaker, second_speaker)
    return new_dialog.count_item("sverhprovodnik", 1)
end

function sverhprovodnik_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "sverhprovodnik", "out", 1)
end

function roza_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "roza", "in", 1)
end

function roza_have(first_speaker, second_speaker)
    return new_dialog.count_item("roza", 1)
end

function roza_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "roza", "out", 1)
end

------------------------------------mg_zombie_final--------------------------------------

function spawn_zomba_nechto()
    spawn_patrol("mg_zombie1", "mg_zombyatina4")
    spawn_patrol("mg_zombie2", "mg_zombyatina4")
    spawn_patrol("mg_zombie3", "mg_zombyatina4")
    spawn_patrol("mg_zombie4", "mg_zombyatina4")
    spawn_patrol("mg_zombie5", "mg_zombyatina4")
    spawn_patrol("mg_zombie6", "mg_zombyatina4")
    spawn_patrol("mg_zombie7", "mg_zombyatina4")
    spawn_patrol("mg_zombie8", "mg_zombyatina4")
    spawn_patrol("mg_zombie9", "mg_zombyatina4")
    spawn_patrol("mg_zombie10", "mg_zombyatina4")
    spawn_patrol("mg_zombie11", "mg_zombyatina4")
    spawn_patrol("mg_zombie12", "mg_zombyatina4")
    spawn_patrol("mg_zombie13", "mg_zombyatina4")
    spawn_patrol("mg_zombie14", "mg_zombyatina4")
    spawn_patrol("mg_zombie15", "mg_zombyatina4")
    spawn_patrol("mg_zombie16", "mg_zombyatina4")
    spawn_patrol("mg_zombie17", "mg_zombyatina4")
    spawn_patrol("mg_zombie18", "mg_zombyatina4")
    spawn_patrol("mg_zombie19", "mg_zombyatina4")
    spawn_patrol("mg_zombie20", "mg_zombyatina4")
    spawn_patrol("mg_zombie21", "mg_zombyatina4")
    spawn_patrol("mg_zombie22", "mg_zombyatina4")
    spawn_patrol("mg_zombie23", "mg_zombyatina4")
    spawn_patrol("mg_zombie24", "mg_zombyatina4")
    spawn_patrol("mg_zombie25", "mg_zombyatina4")
    spawn_patrol("mg_zombie26", "mg_zombyatina4")
    spawn_patrol("mg_zombie27", "mg_zombyatina4")
    spawn_patrol("mg_zombie28", "mg_zombyatina4")
    spawn_patrol("mg_zombie29", "mg_zombyatina4")
    spawn_patrol("mg_zombie30", "mg_zombyatina4")
    spawn_patrol("mg_zombie31", "mg_zombyatina4")
    spawn_patrol("mg_zombie32", "mg_zombyatina4")
    spawn_patrol("mg_zombie33", "mg_zombyatina4")
    spawn_patrol("mg_zombie34", "mg_zombyatina4")
    spawn_patrol("mg_zombie35", "mg_zombyatina4")
    spawn_patrol("mg_zombie36", "mg_zombyatina4")
    spawn_patrol("mg_zombie37", "mg_zombyatina4")
    spawn_patrol("mg_zombie38", "mg_zombyatina4")
    spawn_patrol("mg_zombie39", "mg_zombyatina4")
    spawn_patrol("mg_zombie40", "mg_zombyatina4")
end

function mg_nechto_have(task, info)
    if db.actor and db.actor:has_info("zomba1_dead") and db.actor:has_info("zomba2_dead") and
        db.actor:has_info("zomba3_dead") and db.actor:has_info("zomba4_dead") and db.actor:has_info("zomba5_dead") and
        db.actor:has_info("zomba6_dead") and db.actor:has_info("zomba7_dead") and db.actor:has_info("zomba8_dead") and
        db.actor:has_info("zomba9_dead") and db.actor:has_info("zomba10_dead") and db.actor:has_info("zomba11_dead") and
        db.actor:has_info("zomba12_dead") and db.actor:has_info("zomba13_dead") and db.actor:has_info("zomba14_dead") and
        db.actor:has_info("zomba15_dead") and db.actor:has_info("zomba16_dead") and db.actor:has_info("zomba17_dead") and
        db.actor:has_info("zomba18_dead") and db.actor:has_info("zomba19_dead") and db.actor:has_info("zomba20_dead") and
        db.actor:has_info("zomba21_dead") and db.actor:has_info("zomba22_dead") and db.actor:has_info("zomba23_dead") and
        db.actor:has_info("zomba24_dead") and db.actor:has_info("zomba25_dead") and db.actor:has_info("zomba26_dead") and
        db.actor:has_info("zomba27_dead") and db.actor:has_info("zomba28_dead") and db.actor:has_info("zomba29_dead") and
        db.actor:has_info("zomba30_dead") and db.actor:has_info("zomba31_dead") and db.actor:has_info("zomba32_dead") and
        db.actor:has_info("zomba33_dead") and db.actor:has_info("zomba34_dead") and db.actor:has_info("zomba35_dead") and
        db.actor:has_info("zomba36_dead") and db.actor:has_info("zomba37_dead") and db.actor:has_info("zomba38_dead") and
        db.actor:has_info("zomba39_dead") and db.actor:has_info("zomba40_dead") then
        return db.actor:give_info_portion("mg_nechto_have")
    end
    return false
end

function spawn_sled2()
    local obj = spawn_patrol("sled2", "sled2_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\sled2.ltx"
    alife():assign_story_id(obj.id, story_ids.sled2)
end

function del_nevidimka()
    local obj = alife():story_object(story_ids.nevidimka)
    if obj then
        alife():release(obj, true)
    end
end

function del_brat_monolit()
    local obj = alife():story_object(story_ids.brat_monolit)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_psy_mir()
    spawn_patrol("dogs_mg_muka", "mir_psy")
    spawn_patrol("dogs_mg_muka", "mir_psy")
    spawn_patrol("dogs_mg_muka", "mir_psy")
end

function spawn_nevidimka()
    local obj = alife_create("nevidimka", "l12_stancia_2", vector():set(-25.882, 0.005, 691.909))
    obj.custom_data = "[logic]\ncfg = scripts\\nevidimka.ltx"
    alife():assign_story_id(obj.id, story_ids.nevidimka)
end

function dialog_nevidimka_start()
    local npc = level_object_by_sid(story_ids.nevidimka)
    db.actor:run_talk_dialog(npc)
end

function roza_action()
    level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "")
    level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
    level.add_pp_effector("total_recall.ppe", 2008, false)
    local snd_obj = xr_sound.get_safe_sound_object([[anomaly\blowout]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 15.0)
    level.add_cam_effector("camera_effects\\hit_back_left.anm", 26, false, "")
end

function spawn_kapitan()
    local obj = alife_create("kapitan_brat", "l12_stancia_2", vector():set(-26.660, 0.005, 692.612))
    alife():assign_story_id(obj.id, story_ids.kapitan_brat)
end

function doc_tele_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "doc_tele", "out", 1)
end

function del_kapitan()
    local obj = alife():story_object(story_ids.kapitan_brat)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_sled2_killers()
    spawn_patrol("sled_killer1", "killer1_walk")
    spawn_patrol("sled_killer2", "killer2_walk")
    spawn_patrol("sled_killer3", "killer3_walk")
    spawn_patrol("sled_killer4", "killer4_walk")
    spawn_patrol("sled_killer5", "killer5_walk")
end

function kill_strelok()
    db.actor:kill(db.actor)
end

function run_vibros()
    level.add_pp_effector("vibros.ppe", 1974, false)
    level.add_cam_effector("camera_effects\\earthquake.anm", 1975, false, "")
    set_postprocess("scripts\\earthshake.ltx")
end

function spawn_mono_final()
    spawn_patrol("oso_mono1", "oso_mono1_walk")
    spawn_patrol("oso_mono2", "oso_mono2_walk")
    spawn_patrol("oso_mono3", "oso_mono3_walk")
    spawn_patrol("oso_mono4", "oso_mono4_walk")
    spawn_patrol("oso_mono5", "oso_mono5_walk")
    spawn_patrol("oso_mono6", "oso_mono6_walk")
    spawn_patrol("oso_mono7", "oso_mono7_walk")
    spawn_patrol("oso_mono8", "oso_mono8_walk")
    spawn_patrol("oso_mono9", "oso_mono9_walk")
    spawn_patrol("oso_mono10", "oso_mono10_walk")
    spawn_patrol("oso_mono11", "oso_mono11_walk")
    spawn_patrol("oso_mono12", "oso_mono12_walk")
    spawn_patrol("oso_mono13", "oso_mono13_walk")
    spawn_patrol("oso_mono14", "oso_mono14_walk")
    spawn_patrol("oso_mono15", "oso_mono15_walk")
    spawn_patrol("oso_mono16", "oso_mono16_walk")
    spawn_patrol("oso_mono17", "oso_mono17_walk")
    spawn_patrol("oso_mono18", "oso_mono18_walk")
    spawn_patrol("oso_mono19", "oso_mono19_walk")
    spawn_patrol("oso_mono20", "oso_mono20_walk")
    spawn_patrol("oso_mono21", "oso_mono21_walk")
    spawn_patrol("oso_mono22", "oso_mono22_walk")
    spawn_patrol("oso_mono23", "oso_mono23_walk")

    spawn_patrol("fantom_mono1", "flame_mono1_walk")
    spawn_patrol("fantom_mono2", "flame_mono2_walk")
    spawn_patrol("fantom_mono3", "flame_mono3_walk")
    spawn_patrol("fantom_mono4", "flame_mono6_walk")
    spawn_patrol("fantom_mono5", "flame_mono6_walk")
    spawn_patrol("fantom_mono6", "flame_mono6_walk")
    spawn_patrol("flame_mono6", "flame_mono7_walk")
    spawn_patrol("flame_mono7", "flame_mono7_walk")
    spawn_patrol("flame_mono8", "flame_mono8_walk")
    spawn_patrol("flame_mono9", "flame_mono9_walk")
    spawn_patrol("flame_mono10", "flame_mono10_walk")
    spawn_patrol("flame_mono11", "flame_mono11_walk")
    spawn_patrol("flame_mono12", "flame_mono12_walk")
    spawn_patrol("flame_mono13", "flame_mono13_walk")
    spawn_patrol("flame_mono14", "flame_mono14_walk")
    spawn_patrol("flame_mono15", "flame_mono15_walk")
end

function spawn_mono_zazhali()
    spawn_patrol("flame_mono16", "flame_mono16_walk")
    spawn_patrol("flame_mono17", "flame_mono17_walk")
end

----------------------------------------rad_soldaty-----------------------------------

function spawn_rad_soldaty()
    spawn_patrol("rad_soldat1", "rad_soldat1_walk")
    spawn_patrol("rad_soldat2", "rad_soldat2_walk")
    spawn_patrol("rad_soldat3", "rad_soldat3_walk")
    spawn_patrol("rad_soldat4", "rad_soldat4_walk")
    spawn_patrol("rad_soldat5", "rad_soldat5_walk")
    spawn_patrol("rad_soldat6", "rad_soldat6_walk")
    spawn_patrol("rad_soldat7", "rad_soldat7_walk")
    spawn_patrol("rad_soldat8", "rad_soldat8_walk")
    spawn_patrol("rad_soldat9", "rad_soldat9_walk")
end

function del_klyk()
    local obj = alife():story_object(story_ids.pri_kliyk)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_klyk()
    local obj = spawn_patrol("klychara", "klychara_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\klychara.ltx"
    alife():assign_story_id(obj.id, story_ids.klychara)
end

function del_klychara()
    local obj = alife():story_object(story_ids.klychara)
    if obj then
        alife():release(obj, true)
    end
end

--------------------------------------tt2_patch_01-------------------------------------

function doc_krol_have(first_speaker, second_speaker)
    return new_dialog.count_item("doc_krol", 1)
end

function spawn_vano()
    local obj = spawn_patrol("vano_new", "vano_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\vano_new.ltx"
    alife():assign_story_id(obj.id, story_ids.vano_new)
end

function del_gigant_x18()
    local obj = alife():object("dar_gigant_normal")
    if obj then
        alife():release(obj, true)
    end
end

function enemy_koldun()
    local obj = level_object_by_sid(story_ids.koldun)
    if obj then
        obj:set_relation(game_object.enemy, db.actor)
    end
end

function spawn_koldun()
    local obj = spawn_patrol("koldun", "koldun_walk")
    alife():assign_story_id(obj.id, story_ids.koldun)
    spawn_patrol("koldun_stalk", "koldun_stalk_walk")
    spawn_patrol("koldun_mafon", "koldun_walk")
end

function spawn_koldun_effects()
    level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "")
    level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
    level.add_pp_effector("total_recall.ppe", 2008, false)
    local snd_obj = xr_sound.get_safe_sound_object([[new\mandra]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
    level.add_cam_effector("camera_effects\\hit_back_left.anm", 26, false, "")
end

function spawn_koldun_lapsha()
    spawn_patrol("koldun_lapsha", "koldun_lapsha_walk")
    spawn_koldun_effects()
end

function spawn_koldun_skryaga()
    spawn_patrol("koldun_skryaga", "koldun_skryaga_walk")
    spawn_koldun_effects()
end

function spawn_koldun_shurup()
    spawn_patrol("koldun_shurup", "koldun_shurup_walk")
    spawn_koldun_effects()
end

function spawn_koldun_lukash()
    spawn_patrol("koldun_lukash", "koldun_lukash_walk")
    spawn_koldun_effects()
end

function spawn_koldun_dan()
    spawn_patrol("koldun_dan", "koldun_dan_walk")
    spawn_koldun_effects()
end

function spawn_koldun_levsha()
    spawn_patrol("koldun_levsha", "koldun_levsha_walk")
    spawn_koldun_effects()
end

function spawn_koldun_sviblov()
    spawn_patrol("koldun_sviblov", "koldun_sviblov_walk")
    spawn_koldun_effects()
end

function spawn_koldun_osvedom()
    spawn_patrol("koldun_osvedom", "koldun_osvedom_walk")
    spawn_koldun_effects()
end

function spawn_vozmezdie()
    spawn_patrol("vozmezdie1", "vozmezdie1_walk")
    spawn_patrol("vozmezdie2", "vozmezdie2_walk")
    spawn_patrol("vozmezdie3", "vozmezdie3_walk")
    spawn_koldun_effects()
end

function spawn_doc_voda()
    local obj = spawn_patrol("doc_peredatchik", "doc_voda1")
    level_tasks.add_location_by_id(obj.id, "crlc_big", game.translate_string("metka_reciever"))
    alife():use_ai_locations(obj, false)

    local obj = spawn_patrol("doc_vodyanoy1", "doc_voda1")
    alife():assign_story_id(obj.id, story_ids.doc_vodyanoy1)

    local obj = spawn_patrol("doc_vodyanoy2", "doc_voda2")
    alife():assign_story_id(obj.id, story_ids.doc_vodyanoy2)

    local obj = spawn_patrol("doc_vodyanoy3", "doc_voda3")
    alife():assign_story_id(obj.id, story_ids.doc_vodyanoy3)
end

function doctor_peredatchik_have(first_speaker, second_speaker)
    return new_dialog.count_item("doc_peredatchik", 1)
end

function doctor_peredatchik_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "doc_peredatchik", "out", 1)
end

function del_doc_voda1()
    local obj = alife():story_object(story_ids.doc_vodyanoy1)
    if obj then
        alife():release(obj, true)
    end
end

function del_doc_voda2()
    local obj = alife():story_object(story_ids.doc_vodyanoy2)
    if obj then
        alife():release(obj, true)
    end
end

function del_doc_voda3()
    local obj = alife():story_object(story_ids.doc_vodyanoy3)
    if obj then
        alife():release(obj, true)
    end
end

------------------------------zahar_vodyanoy--------------------------------
function spawn_les_vodyanoy()
    local obj = spawn_patrol("zahar_box", "les_voda")
    level_tasks.add_location_by_id(obj.id, "crlc_big", game.translate_string("metka_zahar"))
    alife():use_ai_locations(obj, false)

    local obj = spawn_patrol("les_vodyanoy1", "les_voda")
    alife():assign_story_id(obj.id, story_ids.les_vodyanoy1)

    local obj = spawn_patrol("les_vodyanoy2", "les_voda")
    alife():assign_story_id(obj.id, story_ids.les_vodyanoy2)
end

function zahar_vodyanoy_have(first_speaker, second_speaker)
    return new_dialog.count_item("zahar_box", 1)
end

function zahar_vodyanoy_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "zahar_box", "out", 1)
    dialogs.relocate_item_section(second_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(second_speaker, "bandage", "in", 3)
    dialogs.relocate_item_section(second_speaker, "ammo_12x70_buck", "in", 5)
end

function spawn_les_wolk()
    spawn_patrol("les_wolk1", "karina_les")
    spawn_patrol("les_wolk2", "karina_les")
    spawn_patrol("les_wolk3", "karina_les")
    spawn_patrol("les_wolk4", "karina_les")
end

function del_les_voda1()
    local obj = alife():story_object(story_ids.les_vodyanoy1)
    if obj then
        alife():release(obj, true)
    end
end

function del_les_voda2()
    local obj = alife():story_object(story_ids.les_vodyanoy2)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_vodyanoy_agro()
    local obj = spawn_patrol("agro_vodyanoy", "agro_voda")
    alife():assign_story_id(obj.id, story_ids.agro_vodyanoy)
end

function del_agro_voda()
    local obj = alife():story_object(story_ids.agro_vodyanoy)
    if obj then
        alife():release(obj, true)
    end
end

function ognemet_have(first_speaker, second_speaker)
    return new_dialog.count_item("wpn_flame", 1)
end

function dvevodka_have(first_speaker, second_speaker)
    return new_dialog.count_item("vodka", 2) and new_dialog.count_item("amk_ballon", 1) and new_dialog.count_item("amk_kanistra", 1)
end

function ognemet_zapravka_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "wpn_flame", "out", 1)
end

function ognemet_zapravka_done(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "vodka", "out", 2)
    dialogs.relocate_item_section(first_speaker, "amk_ballon", "out", 1)
    dialogs.relocate_item_section(first_speaker, "amk_kanistra", "out", 1)
    dialogs.relocate_item_section(second_speaker, "wpn_flame", "in")
end

-----------------------------------vano_vodyanoy--------------------------------

function spawn_vodyanoy_mk()
    local obj = spawn_patrol("mk_vodyanoy", "mk_voda")
    alife():assign_story_id(obj.id, story_ids.mk_vodyanoy)
    local obj = spawn_patrol("box_vano", "mk_voda")
    level_tasks.add_location_by_id(obj.id, "crlc_big", game.translate_string("metka_vano"))
    alife():use_ai_locations(obj, false)
end

function vano_box_have(first_speaker, second_speaker)
    return new_dialog.count_item("box_vano", 1)
end

function vano_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "box_vano", "out", 1)
end

function del_mk_voda()
    local obj = alife():story_object(story_ids.mk_vodyanoy)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_wolki_mk()
    spawn_patrol("mk_wolk1", "mk_voda")
    spawn_patrol("mk_wolk2", "mk_voda")
end

--------------------------------super_final----------------------------------

function spawn_kontr_final1()
    spawn_patrol("kontra_fin1", "kontra_fin1_walk")
    spawn_patrol("kontra_fin2", "kontra_fin2_walk")
    spawn_patrol("kontra_fin3", "kontra_fin3_walk")
    spawn_patrol("kontra_fin4", "kontra_fin4_walk")
    spawn_patrol("kontra_fin5", "kontra_fin5_walk")
    spawn_patrol("kontra_fin6", "kontra_fin6_walk")
    spawn_patrol("kontra_fin7", "kontra_fin7_walk")
    spawn_patrol("kontra_fin8", "kontra_fin8_walk")
    spawn_patrol("m_phantom1", "phantom_fin")
    spawn_patrol("m_phantom2", "phantom_fin")
    spawn_patrol("m_phantom3", "phantom_fin")
    spawn_patrol("m_phantom4", "phantom_fin")
    spawn_patrol("m_phantom5", "phantom_fin")
    spawn_patrol("m_phantom6", "phantom_fin2")
    spawn_patrol("m_phantom7", "phantom_fin2")
    spawn_patrol("m_phantom8", "phantom_fin2")
    spawn_patrol("m_phantom9", "phantom_fin2")
    spawn_patrol("m_phantom10", "phantom_fin2")
end

function spawn_kontr_final2()
    spawn_patrol("kontra_fin9", "kontra_fin9_walk")
    spawn_patrol("kontra_fin10", "kontra_fin10_walk")
    spawn_patrol("kontra_fin11", "kontra_fin11_walk")
    spawn_patrol("kontra_fin12", "kontra_fin12_walk")
end

function spawn_dolg_mafon()
    alife_create("dolg_mafon", "l04_darkvalley", vector():set(-114.235, 2.184, -507.497))
end

function spawn_osvedom_mafon()
    alife_create("osvedom_mafon", "l07_military", vector():set(-194.377, -15.042, 366.539))
end

---------------------------------maroder------------------------------------

function spawn_gena()
    local obj = spawn_patrol("maroder_gena", "maroder_exo_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\predbannik\\maroder_exo.ltx"
    alife():assign_story_id(obj.id, story_ids.maroder_gena)
end

function spawn_maroder()
    spawn_patrol("maroder_boss", "maroder_boss_walk")
    spawn_patrol("maroder_stalk1", "maroder1_walk")
    spawn_patrol("maroder_stalk2", "maroder2_walk")
    spawn_patrol("maroder_stalk3", "maroder3_walk")
    spawn_patrol("maroder_stalk4", "maroder4_walk")
    spawn_patrol("maroder_stalk5", "maroder5_walk")
    spawn_patrol("maroder_stalk6", "maroder6_walk")
    spawn_patrol("maroder_stalk7", "maroder7_walk")
end

function spawn_nato_outfit()
    ogse.spawn_item_in_inv("mir_key", db.actor)
    braad_test.spawn_ai_location("mirotvor_outfit", vector():set(-13.99, 6.00, 186.88), "l13_deep")
    braad_test.spawn_ai_location("mirotvor_outfit", vector():set(-13.99, 6.00, 186.88), "l13_deep")
end

function nato_outfit_have()
    return new_dialog.count_item("mirotvor_outfit", 2)
end

function nato_outfit_net()
    return db.actor and not db.actor:object("mirotvor_outfit")
end

function nato_outfit_otdal(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "mirotvor_outfit", "out", 2)
end

function smith_arsenal_dal(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "mirotvor_outfit", "in")
    dialogs.relocate_item_section(second_speaker, "wpn_adar2_15", "in")
    dialogs.relocate_item_section(second_speaker, "ammo_5.56x45_ap", "in", 2)
    dialogs.relocate_item_section(second_speaker, "grenade_rgd5", "in", 2)
    dialogs.relocate_item_section(second_speaker, "medkit_army", "in", 1)
    dialogs.relocate_item_section(second_speaker, "bandage", "in", 2)
end

function spawn_nato_zasada()
    spawn_patrol("nato_zasada1", "nato_zasada1_walk")
    spawn_patrol("nato_zasada2", "nato_zasada2_walk")
    spawn_patrol("nato_zasada3", "nato_zasada3_walk")
    spawn_patrol("nato_zasada4", "nato_zasada4_walk")
    spawn_patrol("nato_zasada5", "nato_zasada5_walk")
    spawn_patrol("nato_zasada6", "nato_zasada6_walk")
    spawn_patrol("nato_zasada7", "nato_zasada7_walk")
end

function spawn_maroderka_zasada()
    spawn_patrol("maroderka_zasada1", "maroderka1_walk")
    spawn_patrol("maroderka_zasada2", "maroderka2_walk")
    spawn_patrol("maroderka_zasada3", "maroderka3_walk")
    spawn_patrol("maroderka_zasada4", "maroderka4_walk")
    spawn_patrol("maroderka_zasada5", "maroderka5_walk")
end

function spawn_david()
    local obj = spawn_patrol("david", "david_walk")
    alife():assign_story_id(obj.id, story_ids.david)
end

function del_david()
    local obj = alife():story_object(story_ids.david)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_iuda()
    local obj = spawn_patrol("iuda", "iuda_walk")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\iuda.ltx"
    alife():assign_story_id(obj.id, 30215)
end

function spawn_maloy()
    local obj = spawn_patrol("maroder_yang", "maroder_yang_walk")
    alife():assign_story_id(obj.id, story_ids.maroder_yang)

    local obj = spawn_patrol("maroder_mg1", "maroder_mg1_walk")
    alife():assign_story_id(obj.id, story_ids.maroder_mg1)

    local obj = spawn_patrol("maroder_mg2", "maroder_mg2_walk")
    alife():assign_story_id(obj.id, story_ids.maroder_mg2)

    local obj = spawn_patrol("maroder_mg3", "maroder_mg3_walk")
    alife():assign_story_id(obj.id, story_ids.maroder_mg3)

    local obj = spawn_patrol("maroder_mg4", "maroder_mg4_walk")
    alife():assign_story_id(obj.id, story_ids.maroder_mg4)
end

function spawn_maloy_mafon()
    braad_test.spawn_ai_location("maloy_mafon", vector():set(109.575, 2.168, 33.285), "l09_deadcity")
end

function leila_give_money(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "leila_money", "in")
end

function maloy_otdal_money(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "leila_money", "out", 1)
end

function set_metka_maloy()
    local obj = alife():story_object(story_ids.maroder_yang)
    if obj then
        level_tasks.add_location_by_id(obj.id, "crlc_small", game.translate_string("metka_maloy"))
    end
end

function del_metka_maloy()
    local obj = alife():story_object(story_ids.maroder_yang)
    if obj then
        level_tasks.remove_location_by_id(obj.id, "crlc_small")
    end
end

function del_maloy()
    local obj = alife():story_object(story_ids.maroder_yang)
    if obj then
        alife():release(obj, true)
    end
end

function del_maroder_mg()
    local obj = alife():story_object(story_ids.maroder_mg1)
    if obj then
        alife():release(obj, true)
    end

    local obj = alife():story_object(story_ids.maroder_mg2)
    if obj then
        alife():release(obj, true)
    end

    local obj = alife():story_object(story_ids.maroder_mg3)
    if obj then
        alife():release(obj, true)
    end

    local obj = alife():story_object(story_ids.maroder_mg4)
    if obj then
        alife():release(obj, true)
    end
end

function spawn_les_green()
    spawn_patrol("greendog_les", "les_greendog")
    spawn_patrol("greendog_les", "les_greendog")
end

function spawn_swamp_green()
    spawn_patrol("greendog_swamp", "swamp_greendog")
    spawn_patrol("greendog_swamp", "swamp_greendog")
    spawn_patrol("greendog_swamp", "swamp_greendog")
    spawn_patrol("greendog_swamp", "swamp_greendog")
    spawn_patrol("greendog_swamp", "swamp_greendog")
end

function spawn_mir_green()
    spawn_patrol("greendog_mir", "mir_greendog")
    spawn_patrol("greendog_mir", "mir_greendog")
    spawn_patrol("greendog_mir", "mir_greendog")
    spawn_patrol("greendog_mir", "mir_greendog")
    spawn_patrol("greendog_mir", "mir_greendog")
end

function spawn_lesnik_mafon()
    braad_test.spawn_ai_location("lesnik_mafon", vector():set(27.332, 4.402, 26.523), "l10_red_forest")
end

function spawn_maloy2()
    spawn_patrol("maroder_yang1", "maroder_yang_walk")
    spawn_patrol("maroder_mg11", "maroder_yang_walk")
    spawn_patrol("maroder_mg22", "maroder_yang_walk")
    spawn_patrol("maroder_mg33", "maroder_yang_walk")
    spawn_patrol("maroder_mg44", "maroder_yang_walk")
end

function elchimera_spawn()
    local obj = spawn_patrol("elektro_chimera18", "elchimera_x18")
    obj.custom_data = "[logic]\ncfg = scripts\\new\\elektro_chimera18.ltx"
    alife():assign_story_id(obj.id, story_ids.elektro_chimera18)
end

function spawn_skelet1_mg()
    tt2_fixes.delete_obj("dead_city_wall_2")
    alife_create("skelet_3", "l09_deadcity", vector():set(169.398, -2.470, -50.556))
    alife_create("doc_krol", "l09_deadcity", vector():set(169.398, -2.470, -50.556))
end

function spawn_totaliz_mos()
    alife_create("totaliz_mos", "l05_bar", vector():set(210.468, 0.042, 102.420))
end

function spawn_vertel_lektor()
    braad_test.spawn_ai_location("skelet_1", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_1", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_2", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_2", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_3", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_3", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_1", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_1", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_2", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_2", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_3", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_3", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_foot", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_foot", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_hend", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_hend", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_foot", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_foot", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_hend", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
    braad_test.spawn_ai_location("skelet_hend", vector():set(-240.840, 9.609, 49.112), "l06_rostok")
end

function spawn_zarskelet()
    braad_test.spawn_ai_location("skelet_3", vector():set(-30.974, 0.004, 693.734), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_3", vector():set(-20.851, 0.002, 693.588), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_3", vector():set(-26.064, 0.002, 698.637), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_3", vector():set(-22.007, 0.002, 696.746), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_3", vector():set(-30.150, 0.007, 696.339), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_3", vector():set(-29.990, 0.002, 690.576), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_3", vector():set(-22.360, 0.002, 689.950), "l12_stancia_2")
end

function spawn_zarkost()
    braad_test.spawn_ai_location("skelet_foot", vector():set(-30.974, 0.004, 693.734), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_hend", vector():set(-20.851, 0.002, 693.588), "l12_stancia_2")
    braad_test.spawn_ai_location("skelet_foot", vector():set(-26.064, 0.002, 698.637), "l12_stancia_2")
end

-- удаляем Васильева из леса
function del_vas()
    local obj = alife():story_object(story_ids.aver_ecolog)
    if obj then
        alife():release(obj, true)
    end
end

---------------------------------------------mandra-----------------------------------------

-- спавним корень Мандрагоры
function spawn_mandra()
    local obj = spawn_patrol("mandra", "mandra_spot")
    level_tasks.add_location_by_id(obj.id, "crlc_big", game.translate_string("metka_mandra"))
end

function lesnik_dal_stvol(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "wpn_bm16", "in", 1)
    dialogs.relocate_item_section(second_speaker, "novice_outfit", "in", 1)
    dialogs.relocate_item_section(second_speaker, "medkit", "in", 2)
    dialogs.relocate_item_section(second_speaker, "bandage", "in", 3)
    dialogs.relocate_item_section(second_speaker, "ammo_12x70_buck", "in", 2)
end

function mandra_have(task, objective) -- проверяем, появился ли корень в инвентаре
    return db.actor and db.actor:object("mandra")
end

function krik_mandra()
    level.add_cam_effector("camera_effects\\prison_1.anm", 25, false, "")
    level.add_pp_effector("yantar_underground_psi.ppe", 2007, false)
    level.add_pp_effector("total_recall.ppe", 2008, false)
    local snd_obj = xr_sound.get_safe_sound_object([[new\mandra]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
    level.add_cam_effector("camera_effects\\hit_back_left.anm", 26, false, "")
end

-- спавним кабанов после взятия корня
function est_mandra()
    spawn_patrol("boar_normal", "boars_mandra")
    spawn_patrol("boar_normal", "boars_mandra")
    spawn_patrol("boar_normal", "boars_mandra")
end

function nagrad_mandra(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "mandra", "out", 1)
    dialogs.relocate_item_section(second_speaker, "conserva", "in", 1)
    dialogs.relocate_item_section(second_speaker, "kolbasa", "in", 1)
    dialogs.relocate_item_section(second_speaker, "bread", "in", 1)
    dialogs.relocate_item_section(second_speaker, "antirad", "in", 2)
end

function del_borov()
    local obj = alife():story_object(story_ids.bar_Barman)
    if obj then
        alife():release(obj, true)
    end
end

function del_saha()
    local obj = alife():story_object(story_ids.esc_saha)
    if obj then
        alife():release(obj, true)
    end
end

function del_kot()
    local obj = alife():object("stalker_xutor")
    if obj then
        alife():release(obj, true)
    end
end

function del_vovan()
    local obj = alife():object("esc_new_wound")
    if obj then
        alife():release(obj, true)
    end
end

function spawn_brat_monolit()
    local obj = alife_create("brat_monolit", "l12_stancia_2", vector():set(-25.913, 0.005, 693.582))
    alife():assign_story_id(obj.id, story_ids.brat_monolit)
    level.client_spawn_manager():add(obj.id, 0, this.fix_object, 0)
end

function fix_object(arg, id, obj)
    if obj then
        local pshell = obj:get_physics_shell()
        if pshell then
            local element = pshell:get_element_by_order(0)
            if element and not element:is_fixed() then
                element:fix()
            end
        end
    end
end

function spanish_caravan()
    local snd_obj = xr_sound.get_safe_sound_object([[new\spanish_caravan]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function doroga()
    local snd_obj = xr_sound.get_safe_sound_object([[new\doroga]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function pda_fab()
    local snd_obj = xr_sound.get_safe_sound_object([[new\fab_pda]])
    snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)
end

function attach(sm)
    sm:subscribe({signal = "on_monster_hit",	fun = spider_kostolom_spawn})
    sm:subscribe({signal = "on_update",         fun = distance_check})
    sm:subscribe({signal = "on_update",         fun = spider_kostolom_dead})
    sm:subscribe({signal = "on_first_update",   fun = storyline_mix})
    sm:subscribe({signal = "on_info",           fun = storyline_mix})
end
