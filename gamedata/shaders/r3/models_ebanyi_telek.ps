#include "common.h"
#include "sload.h"

float resize(float input, float factor, float offset) { return (input - 0.5f + offset) / factor + 0.5f - offset; }

f_deffer main(p_flat I)
{
    I.tcdh.x = resize(I.tcdh.x, screen_res.x / screen_res.y, 0);
    I.tcdh.y = resize(I.tcdh.y, (screen_res.x / screen_res.y) * 1.2, 0.5);

    // diffuse
    float4 D = tbase(I.tcdh); // IN:  rgb.a

#ifdef USE_TDETAIL
    //	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
    D.rgb = 2 * D.rgb * s_detail.Sample(smp_base, I.tcdbump).rgb;
#endif

    // hemi,sun,material
    float ms = xmaterial;
#ifdef USE_LM_HEMI
    //	float4	lm 	= tex2D( s_hemi, I.lmh );
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    //	float 	h  	= dot( lm.rgb, 1.h/3.h );
    float h = get_hemi(lm);
#ifdef USE_R2_STATIC_SUN
    //		 	ms 	= lm.w			;
    ms = get_sun(lm);
#endif
#else
    float h = I.position.w;
#ifdef USE_R2_STATIC_SUN
    ms = I.tcdh.w;
#endif
#endif

    float4 Ne = float4(normalize((float3)I.N.xyz), h);

    float Y = D.b;
    float U = D.g;
    float V = D.r;

    float c = 1.16406f;
    float3 _Y = float3(c, c, c) * Y;
    float3 _U = float3(0, -0.390625f, +2.01562f) * U;
    float3 _V = float3(+1.59765f, -0.8125f, 0) * V;
    float3 _S = float3(-0.86961f, +0.53076f, -1.0786f);

    return pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.h, ms), float4(_Y + _U + _V + _S, def_gloss));
}
