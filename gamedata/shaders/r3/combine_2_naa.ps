#include "common.h"
#include "mblur.h"
#include "img_corrections.h"
#include "ogsr_radiation_effect.h"
#include "effects_flare.h"

// Check Screen Space Shaders modules
#include "check_screenspace.h"

#include "night_vision.h"

#ifdef SSFX_DEBAND
#include "screenspace_debanding.h"
#endif

#ifdef SSFX_FOG
#include "screenspace_fog.h"
#include "settings_screenspace_FOG.h"
#endif

float4 fakescope_params3;

Texture2D s_ssfx_bloom;
Texture2D s_flares;

float4 main(p_screen I) : SV_Target
{
    float2 center = I.tc0;

    gbuffer_data gbd = gbuffer_load_data(center, I.hpos.xy);

    float depth = gbd.P.z;

    float3 img = s_image.Load(int3(center.xy * screen_res.xy, 0), 0);

    img = mblur(center, gbd.P, img.rgb);
    float4 bloom = s_ssfx_bloom.Sample(smp_rtlinear, center);

#ifdef SSFX_FOG
    float fogresult = SSFX_CALC_FOG(gbd.P);
    fogresult *= fogresult;

    // Fog Scattering -----------------------
    #ifdef G_FOG_USE_SCATTERING
        // Blur sample
        float3 foggg = s_blur_2.Sample(smp_rtlinear, center);

        // Scopes
        int disablefog = (fakescope_params3.x > 0 ? 0 : 1);
        disablefog *= (pnv_param_1.z > 0 ? 0 : 1);  

        // Blend
        img = lerp(img, max(img, foggg), smoothstep(0.2f, 0.8f, fogresult) * disablefog);
    #endif
#endif

// Sky Debanding Implementation  - SCREEN SPACE SHADERS - UPDATE 12.5
#ifdef SSFX_DEBAND
    img = lerp(img, ssfx_debanding(img, center), depth <= SKY_EPS);
#endif


    if (pnv_param_1.z < 1.f)
    {
        img = blend_soft(img, bloom.xyz * bloom.w);
        float4 flares = s_flares.Sample(smp_rtlinear, center);
        img += flares.xyz * flares.a;
    }

    // Vanilla color grading ( Exposure, saturation and gamma )
    img = img_corrections(img);

    img.rgb += rad_effect(img.rgb, center);

    return float4(img, 1.0);
}
