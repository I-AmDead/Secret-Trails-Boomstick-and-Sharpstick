#include "common.h"
#include "mblur.h"
#include "img_corrections.h"
#include "ogsr_radiation_effect.h"
#include "effects_flare.h"

// Check Screen Space Shaders modules
#include "check_screenspace.h"

#ifdef SSFX_BEEFS_NVG
#include "night_vision.h"
#endif

#ifdef SSFX_DEBAND
#include "screenspace_debanding.h"
#endif

#ifdef SSFX_FOG
#include "screenspace_fog.h"
#include "settings_screenspace_FOG.h"
#endif

#ifdef SSFX_INDIRECT_LIGHT
#include "screenspace_il.h"
#else
float4 fakescope_params3;
#endif

#ifdef SSFX_LUT_INUSE
#include "screenspace_lut.h"
#endif

Texture2D s_flares;

float4 main(p_screen I) : SV_Target
{
    int iSample = 0;
    float2 center = I.tc0;

    gbuffer_data gbd = gbuffer_load_data(center, I.hpos.xy, iSample);

    float depth = gbd.P.z;

    float3 img = s_image.Load(int3(center.xy * screen_res.xy, 0), 0);

    img = mblur(center, gbd.P, img.rgb);

// Indirect light - SCREEN SPACE SHADERS - UPDATE 14
#ifdef SSFX_INDIRECT_LIGHT
    ssfx_il(center, I.hpos, gbd.P, gbd.N, img, iSample);
#endif

#ifdef SSFX_FOG

    // Calc Fog
    float fogresult = SSFX_CALC_FOG(gbd.P);
    fogresult *= fogresult;

// Fog Scattering -----------------------
#ifdef G_FOG_USE_SCATTERING
    // Blur sample
    float3 foggg = s_blur_2.Sample(smp_rtlinear, center);

    // Scopes
    int disablefog = (fakescope_params3.x > 0.0 ? 0 : 1);

// NVGs
#ifdef SSFX_BEEFS_NVG
    disablefog *= (pnv_param_1.z > 0 ? 0 : 1);
#endif

    // Blend
    img = lerp(img, max(img, foggg), smoothstep(0.2f, 0.8f, fogresult) * disablefog);
#endif
    // --------------------------------------
#endif

#ifdef SSFX_DEBAND
#ifdef SSFX_FOG
    float Debanding = depth <= SKY_EPS ? 1.0 : fogresult;
#else
    float Debanding = depth <= SKY_EPS ? 1.0 : 0;
#endif

    // Debanding  - SCREEN SPACE SHADERS - UPDATE 12.5
    img = lerp(img, ssfx_debanding(img, center), Debanding);
#endif

    float4 bloom = s_bloom.Sample(smp_rtlinear, center);

#ifdef SSFX_BEEFS_NVG
    // NVG CHANGE TO PREVENT WEIRD COLORS, ONLY APPLY BLOOM WHEN WE'RE NOT IN NVG MASK
    if (pnv_param_1.z < 1.f)
    {
        img = blend_soft(img, bloom.xyz * bloom.w);
        float4 flares = s_flares.Sample(smp_rtlinear, center);
        img += flares.xyz * flares.a;
        img += generate_flare(center);
    }
#else
    img = blend_soft(img, bloom.xyz * bloom.w);
    float4 flares = s_flares.Sample(smp_rtlinear, center);
    img += flares.xyz * flares.a;
    img += generate_flare(center);
#endif

    // Vanilla color grading ( Exposure, saturation and gamma )
    img = img_corrections(img);

#ifdef SSFX_LUT_INUSE
    img = ssfx_lut_pp(img);
#endif

    img.rgb += rad_effect(img.rgb, center);

    return float4(img, 1.0);
}
