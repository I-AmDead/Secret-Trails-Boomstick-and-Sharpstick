#include "common.h"
#include "DX11\tess.h"

[domain("tri")]
v2p_shadow_direct main(HS_CONSTANT_DATA_OUTPUT input, float3 uvw : SV_DomainLocation, const OutputPatch<p_bumped, 3> bp) {
    v2p_shadow_direct output;
    float3 weights = uvw;

    float3 Pos = weights.x * bp[2].position.xyz + weights.y * bp[1].position.xyz + weights.z * bp[0].position.xyz;
    float3 M1 = weights.x * bp[2].M1 + weights.y * bp[1].M1 + weights.z * bp[0].M1;
    float3 M2 = weights.x * bp[2].M2 + weights.y * bp[1].M2 + weights.z * bp[0].M2;
    float3 M3 = weights.x * bp[2].M3 + weights.y * bp[1].M3 + weights.z * bp[0].M3;
    float3 Norm = normalize(float3(M1.z, M2.z, M3.z));
    float2 tc = weights.x * bp[2].tcdh + weights.y * bp[1].tcdh + weights.z * bp[0].tcdh;

#ifdef USE_TDETAIL
    float2 tcd = weights.x * bp[2].tcdbump + weights.y * bp[1].tcdbump + weights.z * bp[0].tcdbump;
#else
    float2 tcd = 0;
#endif

#if TESS_PN
    float3 N[3] = {float3(bp[0].M1.z, bp[0].M2.z, bp[0].M3.z), float3(bp[1].M1.z, bp[1].M2.z, bp[1].M3.z), float3(bp[2].M1.z, bp[2].M2.z, bp[2].M3.z)};
    float3 P[3] = {bp[0].position.xyz, bp[1].position.xyz, bp[2].position.xyz};
    ComputePatchVertex(P, N, uvw, input.patch, Pos, Norm);
#endif

#if TESS_HM
    ComputeDisplacedVertex(Pos, Norm, tc, tcd);
#endif

    output.hpos = mul(m_P, float4(Pos, 1));

    return output;
}