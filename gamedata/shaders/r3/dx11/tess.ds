#include "common.h"
#include "DX11\tess.h"

[domain("tri")]
v2p_bumped main(HS_CONSTANT_DATA_OUTPUT input, float3 uvw : SV_DomainLocation, const OutputPatch<p_bumped, 3> bp) 
{
    v2p_bumped output;

    float minc = min(uvw.x, min(uvw.y, uvw.z));
    if (minc != 0.0f) {
        float threshold = (1.0f / 3.0f) - minc;
        if (threshold > 0.01f) {
            float fK = (1.0f / 3.0f) / threshold;
            fK = minc < 0.1f ? fK : 1.0f;
            uvw = lerp((1.0f / 3.0f).xxx, uvw, fK);
        }
    }

    float3 weights = uvw;
    output.tcdh = weights.x * bp[2].tcdh + weights.y * bp[1].tcdh + weights.z * bp[0].tcdh;
    output.position = weights.x * bp[2].position + weights.y * bp[1].position + weights.z * bp[0].position;

    output.M1 = weights.x * bp[2].M1 + weights.y * bp[1].M1 + weights.z * bp[0].M1;
    output.M2 = weights.x * bp[2].M2 + weights.y * bp[1].M2 + weights.z * bp[0].M2;
    output.M3 = weights.x * bp[2].M3 + weights.y * bp[1].M3 + weights.z * bp[0].M3;
    float3 Normal = normalize(float3(output.M1.z, output.M2.z, output.M3.z));

    output.RDrops = weights.x * bp[2].RDrops + weights.y * bp[1].RDrops + weights.z * bp[0].RDrops;

    float3 triPos = output.position.xyz;

#ifdef USE_TDETAIL
    output.tcdbump = weights.x * bp[2].tcdbump + weights.y * bp[1].tcdbump + weights.z * bp[0].tcdbump;
#endif
#ifdef USE_LM_HEMI
    output.lmh = weights.x * bp[2].lmh + weights.y * bp[1].lmh + weights.z * bp[0].lmh;
#endif

#if TESS_PN
    float3 N[3] = {float3(bp[0].M1.z, bp[0].M2.z, bp[0].M3.z), float3(bp[1].M1.z, bp[1].M2.z, bp[1].M3.z), float3(bp[2].M1.z, bp[2].M2.z, bp[2].M3.z)};
    float3 P[3] = {bp[0].position.xyz, bp[1].position.xyz, bp[2].position.xyz};
    ComputePatchVertex(P, N, uvw, input.patch, output.position.xyz, Normal);
#endif

#if TESS_HM
#ifdef USE_TDETAIL
    ComputeDisplacedVertex(output.position.xyz, Normal, output.tcdh, output.tcdbump);
#else
    ComputeDisplacedVertex(output.position.xyz, Normal, output.tcdh, 0);
#endif
#endif

    if (minc == 0) output.position.xyz = triPos;

    output.hpos = mul(m_P, float4(output.position.xyz, 1));
    output.hpos_curr = weights.x * bp[2].hpos_curr + weights.y * bp[1].hpos_curr + weights.z * bp[0].hpos_curr;
    output.hpos_old = weights.x * bp[2].hpos_old + weights.y * bp[1].hpos_old + weights.z * bp[0].hpos_old;

    output.hpos.xy = get_taa_jitter(output.hpos);

    return output;
}